// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Lexer.jflex


package lexer;
import java_cup.runtime.Symbol;
import parser.sym;
import static parser.sym.*;



// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\0\1\2\1\4\22\0"+
    "\1\2\1\5\1\6\11\0\1\7\15\0\1\10\1\0"+
    "\1\11\1\0\1\12\2\0\1\13\1\0\1\14\1\15"+
    "\1\16\1\17\1\20\1\0\1\21\2\0\1\22\1\23"+
    "\1\24\1\25\1\26\1\0\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\3\0\1\35\1\0\1\36\1\0\1\37"+
    "\1\0\1\40\1\0\1\41\1\42\1\43\1\17\1\44"+
    "\1\0\1\45\2\0\1\46\1\23\1\47\1\50\2\0"+
    "\1\51\1\52\1\53\1\54\5\0\1\55\1\0\1\56"+
    "\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\2\1\1\10\1\11\1\12\1\13\14\0\1\14"+
    "\174\0\1\15\12\0\1\15\7\0\1\16\12\0\1\16"+
    "\56\0\1\17\1\20\32\0\1\21\2\0\1\22\3\0"+
    "\1\23\1\24\1\25\1\21\2\0\1\22\3\0\1\23"+
    "\3\0\1\26\4\0\1\26\4\0\1\27\3\0\1\27"+
    "\1\0\1\30\2\0\1\30\2\0\1\31\1\0\1\31"+
    "\4\0\2\32";

  private static int [] zzUnpackAction() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\57\0\136\0\57\0\215\0\57\0\57"+
    "\0\57\0\57\0\274\0\353\0\57\0\57\0\57\0\57"+
    "\0\u011a\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263"+
    "\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u011a\0\u034e\0\u037d\0\u03ac"+
    "\0\u03db\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524"+
    "\0\u0553\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c"+
    "\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814"+
    "\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c"+
    "\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04"+
    "\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c"+
    "\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0df4"+
    "\0\u0e23\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c"+
    "\0\u0f9b\0\u0fca\0\u0ff9\0\u1028\0\u1057\0\u1086\0\u10b5\0\u10e4"+
    "\0\u1113\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u125c"+
    "\0\u128b\0\u12ba\0\u12e9\0\u1318\0\u1347\0\u1376\0\u13a5\0\u13d4"+
    "\0\u1403\0\u1432\0\u1461\0\u1490\0\u14bf\0\u14ee\0\u151d\0\u154c"+
    "\0\u157b\0\u15aa\0\u15d9\0\u1608\0\u1637\0\u1666\0\u1695\0\u16c4"+
    "\0\u16f3\0\u1722\0\u1751\0\u1780\0\u17af\0\u17de\0\u180d\0\u183c"+
    "\0\u186b\0\u189a\0\u18c9\0\u18f8\0\u1927\0\u1956\0\u1985\0\u19b4"+
    "\0\u19e3\0\u011a\0\u1a12\0\u1a41\0\u1a70\0\u1a9f\0\u1ace\0\u1afd"+
    "\0\u1b2c\0\u1b5b\0\u1b8a\0\u1bb9\0\57\0\u1be8\0\u1c17\0\u1c46"+
    "\0\u1c75\0\u1ca4\0\u1cd3\0\u1d02\0\u011a\0\u1d31\0\u1d60\0\u1d8f"+
    "\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b\0\u1e7a\0\u1ea9\0\u1ed8\0\57"+
    "\0\u1f07\0\u1f36\0\u1f65\0\u1f94\0\u1fc3\0\u1ff2\0\u2021\0\u2050"+
    "\0\u207f\0\u20ae\0\u20dd\0\u210c\0\u213b\0\u216a\0\u2199\0\u21c8"+
    "\0\u21f7\0\u2226\0\u2255\0\u2284\0\u22b3\0\u22e2\0\u2311\0\u2340"+
    "\0\u236f\0\u239e\0\u23cd\0\u23fc\0\u242b\0\u245a\0\u2489\0\u24b8"+
    "\0\u24e7\0\u2516\0\u2545\0\u2574\0\u25a3\0\u25d2\0\u2601\0\u2630"+
    "\0\u265f\0\u268e\0\u26bd\0\u26ec\0\u271b\0\u274a\0\u2779\0\u27a8"+
    "\0\u27d7\0\u2806\0\u2835\0\u2864\0\u2893\0\u28c2\0\u28f1\0\u2920"+
    "\0\u294f\0\u297e\0\u29ad\0\u29dc\0\u2a0b\0\u2a3a\0\u2a69\0\u2a98"+
    "\0\u2ac7\0\u2af6\0\u2b25\0\u2b54\0\u2b83\0\u2bb2\0\u2be1\0\u2c10"+
    "\0\u2c3f\0\u2c6e\0\u011a\0\u2c9d\0\u2ccc\0\u011a\0\u2cfb\0\u2d2a"+
    "\0\u2d59\0\u011a\0\57\0\57\0\57\0\u2d88\0\u2db7\0\57"+
    "\0\u2de6\0\u2e15\0\u2e44\0\57\0\u2e73\0\u2ea2\0\u2ed1\0\u011a"+
    "\0\u2f00\0\u2f2f\0\u2f5e\0\u2f8d\0\57\0\u2fbc\0\u2feb\0\u301a"+
    "\0\u3049\0\u011a\0\u3078\0\u30a7\0\u30d6\0\57\0\u3105\0\u011a"+
    "\0\u3134\0\u3163\0\57\0\u3192\0\u31c1\0\u011a\0\u31f0\0\57"+
    "\0\u321f\0\u324e\0\u327d\0\u32ac\0\u011a\0\57";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\4\2\1\13\1\2\1\14\13\2\1\15\1\16"+
    "\6\2\1\14\7\2\1\17\1\20\62\0\1\3\53\0"+
    "\1\21\4\22\7\21\1\23\1\21\1\24\3\21\1\25"+
    "\1\26\1\27\1\21\1\30\3\21\1\31\6\21\1\32"+
    "\1\21\1\24\2\21\1\25\10\21\21\0\1\33\23\0"+
    "\1\33\35\0\1\34\22\0\1\34\7\0\1\21\4\0"+
    "\1\21\1\35\50\21\1\0\4\22\7\0\1\36\1\0"+
    "\1\37\3\0\1\40\1\41\1\42\1\0\1\43\3\0"+
    "\1\44\6\0\1\45\1\0\1\37\2\0\1\40\10\0"+
    "\1\21\4\0\1\21\1\35\20\21\1\46\21\21\1\47"+
    "\6\21\4\0\1\21\1\35\13\21\1\50\23\21\1\50"+
    "\11\21\4\0\1\21\1\35\16\21\1\51\22\21\1\51"+
    "\7\21\4\0\1\21\1\35\16\21\1\52\22\21\1\52"+
    "\7\21\4\0\1\21\1\35\23\21\1\53\25\21\4\0"+
    "\1\21\1\35\4\21\1\54\44\21\4\0\1\21\1\35"+
    "\21\21\1\55\27\21\4\0\1\21\1\35\20\21\1\47"+
    "\21\21\1\47\5\21\24\0\1\56\22\0\1\56\30\0"+
    "\1\57\23\0\1\57\40\0\1\60\21\0\1\61\27\0"+
    "\1\62\23\0\1\62\35\0\1\63\22\0\1\63\33\0"+
    "\1\64\22\0\1\64\40\0\1\65\37\0\1\66\73\0"+
    "\1\67\55\0\1\61\21\0\1\61\5\0\1\21\4\0"+
    "\1\21\1\35\7\21\1\70\24\21\1\71\14\21\4\0"+
    "\1\21\1\35\7\21\1\71\24\21\1\71\14\21\4\0"+
    "\1\21\1\35\12\21\1\72\23\21\1\72\12\21\4\0"+
    "\1\21\1\35\11\21\1\73\23\21\1\73\13\21\4\0"+
    "\1\21\1\35\6\21\1\74\24\21\1\74\15\21\4\0"+
    "\1\21\1\35\7\21\1\75\41\21\4\0\1\21\1\35"+
    "\21\21\1\76\27\21\4\0\1\21\1\35\23\21\1\77"+
    "\24\21\37\0\1\100\56\0\1\101\35\0\1\102\24\0"+
    "\1\103\31\0\1\103\24\0\1\103\34\0\1\104\23\0"+
    "\1\104\31\0\1\105\23\0\1\105\27\0\1\106\24\0"+
    "\1\106\32\0\1\107\70\0\1\110\60\0\1\111\24\0"+
    "\1\21\4\0\1\21\1\35\4\21\1\112\1\21\1\113"+
    "\22\21\1\112\17\21\4\0\1\21\1\35\4\21\1\112"+
    "\24\21\1\112\17\21\4\0\1\21\1\35\14\21\1\114"+
    "\34\21\4\0\1\21\1\35\12\21\1\115\23\21\1\115"+
    "\12\21\4\0\1\21\1\35\12\21\1\116\23\21\1\116"+
    "\12\21\4\0\1\21\1\35\24\21\1\117\24\21\4\0"+
    "\1\21\1\35\21\21\1\120\27\21\4\0\1\21\1\35"+
    "\4\21\1\121\43\21\30\0\1\122\21\0\1\122\34\0"+
    "\1\123\21\0\1\123\17\0\1\124\1\0\1\125\22\0"+
    "\1\124\31\0\1\124\24\0\1\124\41\0\1\126\54\0"+
    "\1\127\23\0\1\127\32\0\1\130\23\0\1\130\44\0"+
    "\1\131\53\0\1\132\41\0\1\133\43\0\1\21\4\0"+
    "\1\21\1\35\20\21\1\134\21\21\1\134\6\21\4\0"+
    "\1\21\1\35\7\21\1\135\41\21\4\0\1\21\1\35"+
    "\12\21\1\136\23\21\1\136\12\21\4\0\1\21\1\35"+
    "\15\21\1\137\22\21\1\137\10\21\4\0\1\21\1\35"+
    "\10\21\1\140\40\21\4\0\1\21\1\35\16\21\1\141"+
    "\32\21\4\0\1\21\1\35\25\21\1\142\23\21\4\0"+
    "\1\21\1\35\20\21\1\143\27\21\25\0\1\144\22\0"+
    "\1\144\33\0\1\145\22\0\1\145\35\0\1\146\21\0"+
    "\1\146\23\0\1\147\61\0\1\150\23\0\1\150\35\0"+
    "\1\151\22\0\1\151\26\0\1\152\64\0\1\153\65\0"+
    "\1\154\51\0\1\155\27\0\1\21\4\0\1\21\1\35"+
    "\30\21\1\156\20\21\4\0\1\21\1\35\15\21\1\157"+
    "\33\21\4\0\1\21\1\35\15\21\1\160\22\21\1\160"+
    "\10\21\4\0\1\21\1\35\30\21\1\161\20\21\4\0"+
    "\1\21\1\35\12\21\1\162\23\21\1\162\12\21\4\0"+
    "\1\21\1\35\30\21\1\163\20\21\4\0\1\21\1\35"+
    "\16\21\1\164\32\21\4\0\1\21\1\35\12\21\1\165"+
    "\35\21\22\0\1\166\23\0\1\166\32\0\1\167\23\0"+
    "\1\167\47\0\1\170\43\0\1\171\56\0\1\172\22\0"+
    "\1\172\46\0\1\173\40\0\1\174\23\0\1\174\50\0"+
    "\1\175\44\0\1\176\52\0\1\177\35\0\1\21\4\0"+
    "\1\21\1\35\23\21\1\200\21\21\1\200\3\21\4\0"+
    "\1\21\1\35\5\21\1\201\43\21\4\0\1\21\1\35"+
    "\4\21\1\202\24\21\1\202\17\21\4\0\1\21\1\35"+
    "\23\21\1\203\21\21\1\203\3\21\4\0\1\21\1\35"+
    "\5\21\1\204\24\21\1\204\16\21\4\0\1\21\1\35"+
    "\17\21\1\205\31\21\4\0\1\21\1\35\20\21\1\206"+
    "\30\21\4\0\1\21\1\35\16\21\1\207\31\21\21\0"+
    "\1\210\23\0\1\210\32\0\1\211\23\0\1\211\43\0"+
    "\1\212\21\0\1\212\16\0\1\213\55\0\1\214\24\0"+
    "\1\214\50\0\1\215\21\0\1\215\16\0\1\216\24\0"+
    "\1\216\43\0\1\217\57\0\1\220\54\0\1\221\31\0"+
    "\1\21\4\0\1\21\1\35\21\21\1\222\21\21\1\222"+
    "\5\21\4\0\1\21\1\35\12\21\1\223\36\21\4\0"+
    "\1\21\1\35\20\21\1\224\21\21\1\224\6\21\4\0"+
    "\1\21\1\35\21\21\1\225\21\21\1\225\5\21\4\0"+
    "\1\21\1\35\4\21\1\226\24\21\1\226\17\21\4\0"+
    "\1\21\1\35\4\21\1\227\44\21\4\0\1\21\1\35"+
    "\6\21\1\230\42\21\4\231\1\21\1\232\30\21\1\233"+
    "\17\21\14\0\1\234\24\0\1\234\31\0\1\235\24\0"+
    "\1\235\45\0\1\236\21\0\1\236\25\0\1\237\64\0"+
    "\1\240\21\0\1\240\35\0\1\241\21\0\1\241\17\0"+
    "\1\242\24\0\1\242\31\0\1\243\60\0\1\244\42\0"+
    "\4\231\1\0\1\245\30\0\1\246\17\0\1\21\4\0"+
    "\1\21\1\35\23\21\1\247\21\21\1\247\3\21\4\0"+
    "\1\21\1\35\4\21\1\250\44\21\4\0\1\21\1\35"+
    "\30\21\1\251\20\21\4\0\1\21\1\35\23\21\1\252"+
    "\21\21\1\252\3\21\4\0\1\21\1\35\20\21\1\253"+
    "\21\21\1\253\6\21\4\0\1\21\1\35\21\21\1\254"+
    "\27\21\4\244\1\21\1\255\50\21\1\0\4\231\1\0"+
    "\1\245\50\0\1\21\4\0\1\21\1\35\4\21\1\256"+
    "\10\21\1\257\32\21\21\0\1\260\23\0\1\260\32\0"+
    "\1\261\23\0\1\261\43\0\1\262\21\0\1\262\15\0"+
    "\1\263\102\0\1\264\51\0\1\265\21\0\1\265\31\0"+
    "\1\266\21\0\1\266\35\0\1\267\27\0\4\244\1\0"+
    "\1\270\63\0\1\271\10\0\1\272\32\0\1\21\4\0"+
    "\1\21\1\35\4\21\1\273\24\21\1\273\17\21\4\0"+
    "\1\21\1\35\13\21\1\274\35\21\4\0\1\21\1\35"+
    "\23\21\1\275\21\21\1\275\3\21\4\0\1\21\1\35"+
    "\4\21\1\276\24\21\1\276\17\21\4\0\1\21\1\35"+
    "\30\21\1\277\20\21\4\0\1\21\1\35\21\21\1\300"+
    "\27\21\4\0\1\21\1\35\15\21\1\301\33\21\4\0"+
    "\1\21\1\35\23\21\1\302\24\21\31\0\1\303\21\0"+
    "\1\303\34\0\1\304\21\0\1\304\16\0\1\305\24\0"+
    "\1\305\40\0\1\306\66\0\1\307\21\0\1\307\15\0"+
    "\1\310\24\0\1\310\55\0\1\311\47\0\1\312\52\0"+
    "\1\313\64\0\1\314\24\0\1\21\4\0\1\21\1\35"+
    "\20\21\1\315\21\21\1\315\6\21\4\0\1\21\1\35"+
    "\7\21\1\316\41\21\4\0\1\21\1\35\21\21\1\317"+
    "\21\21\1\317\5\21\4\0\1\21\1\35\20\21\1\320"+
    "\21\21\1\320\6\21\4\0\1\21\1\35\23\21\1\321"+
    "\21\21\1\321\3\21\4\0\1\21\1\35\25\21\1\322"+
    "\23\21\4\0\1\21\1\35\22\21\1\323\26\21\4\0"+
    "\1\21\1\35\7\21\1\324\40\21\32\0\1\325\21\0"+
    "\1\325\34\0\1\326\21\0\1\326\31\0\1\327\21\0"+
    "\1\327\23\0\1\330\70\0\1\331\21\0\1\331\33\0"+
    "\1\332\21\0\1\332\37\0\1\333\21\0\1\333\36\0"+
    "\1\334\53\0\1\335\43\0\1\336\40\0\1\21\4\0"+
    "\1\21\1\35\12\21\1\337\23\21\1\337\12\21\4\0"+
    "\1\21\1\35\21\21\1\340\27\21\4\0\1\21\1\35"+
    "\23\21\1\341\21\21\1\341\3\21\4\0\1\21\1\35"+
    "\12\21\1\342\23\21\1\342\12\21\4\0\1\21\1\35"+
    "\21\21\1\343\21\21\1\343\5\21\4\0\1\21\1\35"+
    "\16\21\1\344\32\21\4\0\1\21\1\35\12\21\1\345"+
    "\36\21\4\0\1\21\1\35\24\21\1\346\23\21\15\0"+
    "\1\347\24\0\1\347\31\0\1\350\24\0\1\350\35\0"+
    "\1\351\23\0\1\351\41\0\1\352\60\0\1\353\21\0"+
    "\1\353\23\0\1\354\23\0\1\354\41\0\1\355\21\0"+
    "\1\355\31\0\1\356\52\0\1\357\70\0\1\360\23\0"+
    "\1\21\4\0\1\21\1\35\16\21\1\361\22\21\1\361"+
    "\7\21\4\0\1\21\1\35\30\21\1\362\20\21\4\0"+
    "\1\21\1\35\4\21\1\363\24\21\1\363\17\21\4\0"+
    "\1\21\1\35\16\21\1\364\22\21\1\364\7\21\4\0"+
    "\1\21\1\35\23\21\1\365\21\21\1\365\3\21\4\0"+
    "\1\21\1\35\20\21\1\366\30\21\4\0\1\21\1\35"+
    "\11\21\1\367\37\21\4\0\1\21\1\35\16\21\1\370"+
    "\31\21\16\0\1\371\24\0\1\371\31\0\1\372\24\0"+
    "\1\372\40\0\1\373\22\0\1\373\45\0\1\374\32\0"+
    "\1\375\24\0\1\375\43\0\1\376\22\0\1\376\40\0"+
    "\1\377\21\0\1\377\31\0\1\u0100\47\0\1\u0101\63\0"+
    "\1\u0102\31\0\1\21\4\373\1\21\1\u0103\51\21\4\0"+
    "\1\21\1\35\23\21\1\u0104\25\21\4\0\1\21\1\35"+
    "\20\21\1\u0105\21\21\1\u0105\6\21\4\376\1\21\1\u0106"+
    "\51\21\4\0\1\21\1\35\4\21\1\u0107\24\21\1\u0107"+
    "\17\21\4\0\1\21\1\35\6\21\1\u0108\42\21\4\0"+
    "\1\21\1\35\23\21\1\u0109\25\21\4\u0102\1\21\1\u010a"+
    "\50\21\30\0\1\u010b\21\0\1\u010b\34\0\1\u010c\21\0"+
    "\1\u010c\5\0\4\373\1\0\1\u010d\102\0\1\u010e\53\0"+
    "\1\u010f\21\0\1\u010f\6\0\4\376\1\0\1\u0110\63\0"+
    "\1\u0111\24\0\1\u0111\33\0\1\u0112\73\0\1\u0113\25\0"+
    "\4\u0102\1\0\1\u0114\50\0\1\21\4\0\1\21\1\35"+
    "\21\21\1\u0115\27\21\4\0\1\21\1\35\12\21\1\u0116"+
    "\23\21\1\u0116\12\21\4\0\1\21\1\35\20\21\1\u0117"+
    "\21\21\1\u0117\6\21\4\u0112\1\21\1\u0118\51\21\4\0"+
    "\1\21\1\35\16\21\1\u0119\31\21\30\0\1\u011a\47\0"+
    "\1\u011b\23\0\1\u011b\40\0\1\u011c\21\0\1\u011c\6\0"+
    "\4\u0112\1\0\1\u011d\75\0\1\u011e\31\0\1\21\4\0"+
    "\1\21\1\35\23\21\1\u011f\25\21\4\0\1\21\1\35"+
    "\16\21\1\u0120\22\21\1\u0120\7\21\4\0\1\21\1\35"+
    "\12\21\1\u0121\23\21\1\u0121\12\21\4\u011e\1\21\1\u0122"+
    "\50\21\32\0\1\u0123\51\0\1\u0124\22\0\1\u0124\27\0"+
    "\1\u0125\23\0\1\u0125\12\0\4\u011e\1\0\1\u0126\50\0"+
    "\1\21\4\0\1\21\1\35\4\21\1\u0127\44\21\4\u0124"+
    "\1\21\1\u0128\51\21\4\0\1\21\1\35\16\21\1\u0129"+
    "\22\21\1\u0129\6\21\13\0\1\u012a\44\0\4\u0124\1\0"+
    "\1\u012b\75\0\1\u012c\22\0\1\u012c\6\0\1\21\4\0"+
    "\1\21\1\35\20\21\1\u012d\30\21\4\u012c\1\21\1\u012e"+
    "\50\21\27\0\1\u012f\30\0\4\u012c\1\0\1\u0130\50\0"+
    "\1\21\4\0\1\21\1\35\12\21\1\u0131\35\21\21\0"+
    "\1\u0132\35\0\1\21\4\0\1\21\1\35\16\21\1\u0133"+
    "\31\21\25\0\1\u0134\31\0\1\21\4\u0134\1\21\1\u0135"+
    "\50\21\1\0\4\u0134\1\0\1\u0136\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13019];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\1\1\4\11\2\1\4\11"+
    "\14\0\1\1\174\0\1\1\12\0\1\11\7\0\1\1"+
    "\12\0\1\11\56\0\2\1\32\0\1\1\2\0\1\1"+
    "\3\0\1\1\3\11\2\0\1\11\3\0\1\11\3\0"+
    "\1\1\4\0\1\11\4\0\1\1\3\0\1\11\1\0"+
    "\1\1\2\0\1\11\2\0\1\1\1\0\1\11\4\0"+
    "\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, String lexeme) {
        System.out.printf("Token tipo %d, lexeme %s, en linea %d, columna %d\n", type, lexeme == null ? "" : lexeme, yyline + 1, yycolumn + 1);
        return new Symbol(type, new Token(lexeme, yyline + 1, yycolumn + 1));
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error en "+yytext());
            }
            // fall through
          case 27: break;
          case 2:
            { 
            }
            // fall through
          case 28: break;
          case 3:
            { return symbol(EXCLAMACION,yytext());
            }
            // fall through
          case 29: break;
          case 4:
            { return symbol(COMA,yytext());
            }
            // fall through
          case 30: break;
          case 5:
            { return symbol(PUNTOS,yytext());
            }
            // fall through
          case 31: break;
          case 6:
            { return symbol(MENOR,yytext());
            }
            // fall through
          case 32: break;
          case 7:
            { return symbol(MAYOR,yytext());
            }
            // fall through
          case 33: break;
          case 8:
            { return symbol(CORCHETE_A,yytext());
            }
            // fall through
          case 34: break;
          case 9:
            { return symbol(CORCHETE_C,yytext());
            }
            // fall through
          case 35: break;
          case 10:
            { return symbol(LLAVE_A,yytext());
            }
            // fall through
          case 36: break;
          case 11:
            { return symbol(LLAVE_C,yytext());
            }
            // fall through
          case 37: break;
          case 12:
            { return symbol(CADENA_WS,yytext());
            }
            // fall through
          case 38: break;
          case 13:
            { return symbol(USUARIO,yytext());
            }
            // fall through
          case 39: break;
          case 14:
            { return symbol(PASSWORD,yytext());
            }
            // fall through
          case 40: break;
          case 15:
            { return symbol(FIN_SOLICITUD,yytext());
            }
            // fall through
          case 41: break;
          case 16:
            { return symbol(INI_SOLICITUD,yytext());
            }
            // fall through
          case 42: break;
          case 17:
            { return symbol(CREAR_USUARIO,yytext());
            }
            // fall through
          case 43: break;
          case 18:
            { return symbol(LOGIN_USUARIO,yytext());
            }
            // fall through
          case 44: break;
          case 19:
            { return symbol(USUARIO_NUEVO,yytext());
            }
            // fall through
          case 45: break;
          case 20:
            { return symbol(FIN_SOLICITUDES,yytext());
            }
            // fall through
          case 46: break;
          case 21:
            { return symbol(INI_SOLICITUDES,yytext());
            }
            // fall through
          case 47: break;
          case 22:
            { return symbol(NUEVO_PASSWORD,yytext());
            }
            // fall through
          case 48: break;
          case 23:
            { return symbol(USUARIO_ANTIGUO,yytext());
            }
            // fall through
          case 49: break;
          case 24:
            { return symbol(ELIMINAR_USUARIO,yytext());
            }
            // fall through
          case 50: break;
          case 25:
            { return symbol(MODIFICAR_USUARIO,yytext());
            }
            // fall through
          case 51: break;
          case 26:
            { return symbol(CREDENCIALES_USUARIO,yytext());
            }
            // fall through
          case 52: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   */
  private static String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
