// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Lexer.jflex


package lexer;
import java_cup.runtime.Symbol;
import parser.sym;
import static parser.sym.*;



// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\0\1\2\1\4\22\0"+
    "\1\2\1\5\1\6\1\0\1\7\7\0\1\10\1\11"+
    "\2\0\1\12\1\13\1\14\1\15\6\16\1\17\1\0"+
    "\1\20\1\0\1\21\2\0\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\0\1\52\1\53\1\0"+
    "\1\54\1\0\1\55\1\0\1\56\1\0\1\57\1\60"+
    "\1\61\1\62\1\0\1\63\1\64\1\0\1\65\1\66"+
    "\1\0\1\67\1\70\2\0\1\71\1\72\1\73\1\74"+
    "\5\0\1\75\1\0\1\76\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\2\1\1\10\1\11\1\12\1\13\31\0\1\14"+
    "\1\15\24\0\1\14\112\0\1\16\23\0\1\17\7\0"+
    "\1\20\7\0\1\21\120\0\1\22\67\0\1\23\21\0"+
    "\1\24\54\0\1\25\3\0\1\26\1\0\1\27\5\0"+
    "\1\30\14\0\1\31\51\0\1\32\7\0\1\33\1\34"+
    "\5\0\1\35\10\0\1\36\64\0\1\37\42\0\1\40"+
    "\1\41\13\0\1\42\1\0\1\43\57\0\1\44\32\0"+
    "\1\45\1\0\1\46\1\47\7\0\1\50\41\0\1\51"+
    "\22\0\1\52\1\53\36\0\1\54\34\0\1\55\5\0"+
    "\1\56\7\0\1\57\1\0\1\60\1\61\1\62\23\0"+
    "\1\63\4\0\1\64\32\0\1\65\17\0\1\66\3\0"+
    "\1\67\21\0\1\70\12\0\1\71\17\0\1\72\1\73"+
    "\11\0\1\74\1\75\1\76\4\0\1\77\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[923];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\77\0\176\0\77\0\275\0\77\0\77"+
    "\0\77\0\77\0\374\0\u013b\0\77\0\77\0\77\0\77"+
    "\0\u017a\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333"+
    "\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b"+
    "\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723"+
    "\0\u0762\0\77\0\77\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d"+
    "\0\u08dc\0\u091b\0\u095a\0\u0999\0\u09d8\0\u0a17\0\u0a56\0\u0a95"+
    "\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d"+
    "\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85"+
    "\0\u0ec4\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d"+
    "\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275"+
    "\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d"+
    "\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665"+
    "\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d"+
    "\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u1a55"+
    "\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d"+
    "\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45"+
    "\0\u1e84\0\u1ec3\0\u0c8d\0\u0c8d\0\u1f02\0\u1f41\0\u1f80\0\u1fbf"+
    "\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7"+
    "\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331\0\77\0\u2370"+
    "\0\u23af\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea\0\77\0\u2529"+
    "\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3\0\77\0\u26e2"+
    "\0\u2721\0\u2760\0\u279f\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da"+
    "\0\u2919\0\u2958\0\u2997\0\u29d6\0\u2a15\0\u2a54\0\u2a93\0\u2ad2"+
    "\0\u2b11\0\u2b50\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b\0\u2cca"+
    "\0\u2d09\0\u2d48\0\u2d87\0\u2dc6\0\u2e05\0\u2e44\0\u2e83\0\u2ec2"+
    "\0\u2f01\0\u2f40\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c\0\u307b\0\u30ba"+
    "\0\u30f9\0\u3138\0\u3177\0\u31b6\0\u31f5\0\u3234\0\u3273\0\u32b2"+
    "\0\u32f1\0\u3330\0\u336f\0\u33ae\0\u33ed\0\u342c\0\u346b\0\u34aa"+
    "\0\u34e9\0\u3528\0\u3567\0\u35a6\0\u35e5\0\u3624\0\u3663\0\u36a2"+
    "\0\u36e1\0\u3720\0\u375f\0\u379e\0\u37dd\0\u381c\0\u385b\0\u389a"+
    "\0\u38d9\0\u3918\0\u3957\0\u3996\0\u39d5\0\u3a14\0\u3a53\0\77"+
    "\0\u3a92\0\u3ad1\0\u3b10\0\u3b4f\0\u3b8e\0\u3bcd\0\u3c0c\0\u3c4b"+
    "\0\u3c8a\0\u3cc9\0\u3d08\0\u3d47\0\u3d86\0\u3dc5\0\u3e04\0\u3e43"+
    "\0\u3e82\0\u3ec1\0\u3f00\0\u3f3f\0\u3f7e\0\u3fbd\0\u3ffc\0\u403b"+
    "\0\u407a\0\u40b9\0\u40f8\0\u4137\0\u4176\0\u41b5\0\u41f4\0\u4233"+
    "\0\u4272\0\u42b1\0\u42f0\0\u432f\0\u436e\0\u43ad\0\u43ec\0\u442b"+
    "\0\u446a\0\u44a9\0\u44e8\0\u4527\0\u4566\0\u45a5\0\u45e4\0\u4623"+
    "\0\u4662\0\u46a1\0\u46e0\0\u471f\0\u475e\0\u479d\0\u47dc\0\77"+
    "\0\u481b\0\u485a\0\u4899\0\u48d8\0\u4917\0\u4956\0\u4995\0\u49d4"+
    "\0\u4a13\0\u4a52\0\u4a91\0\u4ad0\0\u4b0f\0\u4b4e\0\u4b8d\0\u4bcc"+
    "\0\u4c0b\0\77\0\u4c4a\0\u4c89\0\u4cc8\0\u4d07\0\u4d46\0\u4d85"+
    "\0\u4dc4\0\u4e03\0\u4e42\0\u4e81\0\u4ec0\0\u4eff\0\u4f3e\0\u4f7d"+
    "\0\u4fbc\0\u4ffb\0\u503a\0\u5079\0\u50b8\0\u50f7\0\u5136\0\u5175"+
    "\0\u51b4\0\u51f3\0\u5232\0\u5271\0\u52b0\0\u52ef\0\u532e\0\u536d"+
    "\0\u53ac\0\u53eb\0\u542a\0\u5469\0\u54a8\0\u54e7\0\u5526\0\u5565"+
    "\0\u55a4\0\u55e3\0\u5622\0\u5661\0\u56a0\0\u56df\0\77\0\u571e"+
    "\0\u575d\0\u579c\0\77\0\u57db\0\77\0\u581a\0\u5859\0\u5898"+
    "\0\u58d7\0\u5916\0\77\0\u5955\0\u5994\0\u59d3\0\u5a12\0\u5a51"+
    "\0\u5a90\0\u5acf\0\u5b0e\0\u5b4d\0\u5b8c\0\u5bcb\0\u5c0a\0\77"+
    "\0\u5c49\0\u5c88\0\u5cc7\0\u5d06\0\u5d45\0\u5d84\0\u5dc3\0\u5e02"+
    "\0\u5e41\0\u5e80\0\u5ebf\0\u5efe\0\u5f3d\0\u5f7c\0\u5fbb\0\u5ffa"+
    "\0\u6039\0\u6078\0\u60b7\0\u60f6\0\u6135\0\u6174\0\u61b3\0\u61f2"+
    "\0\u6231\0\u6270\0\u62af\0\u62ee\0\u632d\0\u636c\0\u63ab\0\u63ea"+
    "\0\u6429\0\u6468\0\u64a7\0\u64e6\0\u6525\0\u6564\0\u65a3\0\u65e2"+
    "\0\u6621\0\77\0\u6660\0\u669f\0\u66de\0\u671d\0\u675c\0\u679b"+
    "\0\u67da\0\77\0\77\0\u6819\0\u6858\0\u6897\0\u68d6\0\u6915"+
    "\0\77\0\u6954\0\u6993\0\u69d2\0\u6a11\0\u6a50\0\u6a8f\0\u6ace"+
    "\0\u6b0d\0\77\0\u6b4c\0\u6b8b\0\u6bca\0\u6c09\0\u6c48\0\u6c87"+
    "\0\u6cc6\0\u6d05\0\u6d44\0\u6d83\0\u6dc2\0\u6e01\0\u6e40\0\u6e7f"+
    "\0\u6ebe\0\u6efd\0\u6f3c\0\u6f7b\0\u6fba\0\u6ff9\0\u7038\0\u7077"+
    "\0\u70b6\0\u70f5\0\u7134\0\u7173\0\u71b2\0\u71f1\0\u7230\0\u726f"+
    "\0\u72ae\0\u72ed\0\u732c\0\u736b\0\u73aa\0\u73e9\0\u7428\0\u7467"+
    "\0\u74a6\0\u74e5\0\u7524\0\u7563\0\u75a2\0\u75e1\0\u7620\0\u765f"+
    "\0\u769e\0\u76dd\0\u771c\0\u775b\0\u779a\0\u77d9\0\77\0\u7818"+
    "\0\u7857\0\u7896\0\u78d5\0\u7914\0\u7953\0\u7992\0\u79d1\0\u7a10"+
    "\0\u7a4f\0\u7a8e\0\u7acd\0\u7b0c\0\u7b4b\0\u7b8a\0\u7bc9\0\u7c08"+
    "\0\u7c47\0\u7c86\0\u7cc5\0\u7d04\0\u7d43\0\u7d82\0\u7dc1\0\u7e00"+
    "\0\u7e3f\0\u7e7e\0\u7ebd\0\u7efc\0\u7f3b\0\u7f7a\0\u7fb9\0\u7ff8"+
    "\0\u8037\0\77\0\77\0\u8076\0\u80b5\0\u80f4\0\u8133\0\u8172"+
    "\0\u81b1\0\u81f0\0\u822f\0\u826e\0\u82ad\0\u82ec\0\77\0\u832b"+
    "\0\77\0\u836a\0\u83a9\0\u83e8\0\u8427\0\u8466\0\u84a5\0\u84e4"+
    "\0\u8523\0\u8562\0\u85a1\0\u85e0\0\u861f\0\u865e\0\u869d\0\u86dc"+
    "\0\u871b\0\u875a\0\u8799\0\u87d8\0\u8817\0\u8856\0\u8895\0\u88d4"+
    "\0\u8913\0\u8952\0\u8991\0\u89d0\0\u8a0f\0\u8a4e\0\u8a8d\0\u8acc"+
    "\0\u8b0b\0\u8b4a\0\u8b89\0\u8bc8\0\u8c07\0\u8c46\0\u8c85\0\u8cc4"+
    "\0\u8d03\0\u8d42\0\u8d81\0\u8dc0\0\u8dff\0\u8e3e\0\u8e7d\0\u8ebc"+
    "\0\77\0\u8efb\0\u8f3a\0\u8f79\0\u8fb8\0\u8ff7\0\u9036\0\u9075"+
    "\0\u90b4\0\u90f3\0\u9132\0\u9171\0\u91b0\0\u91ef\0\u922e\0\u926d"+
    "\0\u92ac\0\u92eb\0\u932a\0\u9369\0\u93a8\0\u93e7\0\u9426\0\u9465"+
    "\0\u94a4\0\u94e3\0\u9522\0\77\0\u9561\0\77\0\77\0\u95a0"+
    "\0\u95df\0\u961e\0\u965d\0\u969c\0\u96db\0\u971a\0\77\0\u9759"+
    "\0\u9798\0\u97d7\0\u9816\0\u9855\0\u9894\0\u98d3\0\u9912\0\u9951"+
    "\0\u9990\0\u99cf\0\u9a0e\0\u9a4d\0\u9a8c\0\u9acb\0\u9b0a\0\u9b49"+
    "\0\u9b88\0\u9bc7\0\u9c06\0\u9c45\0\u9c84\0\u9cc3\0\u9d02\0\u9d41"+
    "\0\u9d80\0\u9dbf\0\u9dfe\0\u9e3d\0\u9e7c\0\u9ebb\0\u9efa\0\u9f39"+
    "\0\77\0\u9f78\0\u9fb7\0\u9ff6\0\ua035\0\ua074\0\ua0b3\0\ua0f2"+
    "\0\ua131\0\ua170\0\ua1af\0\ua1ee\0\ua22d\0\ua26c\0\ua2ab\0\ua2ea"+
    "\0\ua329\0\ua368\0\ua3a7\0\ua3e6\0\ua425\0\ua464\0\ua4a3\0\ua4e2"+
    "\0\ua521\0\ua560\0\ua59f\0\ua5de\0\ua61d\0\ua65c\0\ua69b\0\ua6da"+
    "\0\ua719\0\ua758\0\ua797\0\ua7d6\0\ua815\0\ua854\0\ua893\0\ua8d2"+
    "\0\ua911\0\ua950\0\ua98f\0\ua9ce\0\uaa0d\0\uaa4c\0\uaa8b\0\uaaca"+
    "\0\uab09\0\uab48\0\uab87\0\77\0\uabc6\0\uac05\0\uac44\0\uac83"+
    "\0\uacc2\0\uad01\0\uad40\0\uad7f\0\uadbe\0\uadfd\0\uae3c\0\uae7b"+
    "\0\uaeba\0\uaef9\0\uaf38\0\uaf77\0\uafb6\0\uaff5\0\ub034\0\ub073"+
    "\0\ub0b2\0\ub0f1\0\ub130\0\ub16f\0\ub1ae\0\ub1ed\0\ub22c\0\ub26b"+
    "\0\77\0\ub2aa\0\ub2e9\0\ub328\0\ub367\0\ub3a6\0\77\0\ub3e5"+
    "\0\ub424\0\ub463\0\ub4a2\0\ub4e1\0\ub520\0\ub55f\0\77\0\ub59e"+
    "\0\77\0\77\0\77\0\ub5dd\0\ub61c\0\ub65b\0\ub69a\0\ub6d9"+
    "\0\ub718\0\ub757\0\ub796\0\ub7d5\0\ub814\0\ub853\0\ub892\0\ub8d1"+
    "\0\ub910\0\ub94f\0\ub98e\0\ub9cd\0\uba0c\0\uba4b\0\77\0\uba8a"+
    "\0\ubac9\0\ubb08\0\ubb47\0\77\0\ubb86\0\ubbc5\0\ubc04\0\ubc43"+
    "\0\ubc82\0\ubcc1\0\ubd00\0\ubd3f\0\ubd7e\0\ubdbd\0\ubdfc\0\ube3b"+
    "\0\ube7a\0\ubeb9\0\ubef8\0\ubf37\0\ubf76\0\ubfb5\0\ubff4\0\uc033"+
    "\0\uc072\0\uc0b1\0\uc0f0\0\uc12f\0\uc16e\0\uc1ad\0\77\0\uc1ec"+
    "\0\uc22b\0\uc26a\0\uc2a9\0\uc2e8\0\uc327\0\uc366\0\uc3a5\0\uc3e4"+
    "\0\uc423\0\uc462\0\uc4a1\0\uc4e0\0\uc51f\0\uc55e\0\77\0\uc59d"+
    "\0\uc5dc\0\uc61b\0\77\0\uc65a\0\uc699\0\uc6d8\0\uc717\0\uc756"+
    "\0\uc795\0\uc7d4\0\uc813\0\uc852\0\uc891\0\uc8d0\0\uc90f\0\uc94e"+
    "\0\uc98d\0\uc9cc\0\uca0b\0\uca4a\0\77\0\uca89\0\ucac8\0\ucb07"+
    "\0\ucb46\0\ucb85\0\ucbc4\0\ucc03\0\ucc42\0\ucc81\0\uccc0\0\77"+
    "\0\uccff\0\ucd3e\0\ucd7d\0\ucdbc\0\ucdfb\0\uce3a\0\uce79\0\uceb8"+
    "\0\ucef7\0\ucf36\0\ucf75\0\ucfb4\0\ucff3\0\ud032\0\ud071\0\77"+
    "\0\77\0\ud0b0\0\ud0ef\0\ud12e\0\ud16d\0\ud1ac\0\ud1eb\0\ud22a"+
    "\0\ud269\0\ud2a8\0\77\0\77\0\77\0\ud2e7\0\ud326\0\ud365"+
    "\0\ud3a4\0\77\0\77";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[923];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\2\3\1\4\1\5\1\6\1\2\1\7\6\2"+
    "\1\10\1\11\1\12\5\2\1\13\2\2\1\14\20\2"+
    "\1\15\1\16\5\2\1\13\1\2\1\14\10\2\1\17"+
    "\1\20\102\0\1\3\73\0\1\21\4\22\1\21\1\0"+
    "\1\23\1\21\1\23\1\21\4\24\3\21\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\2\21\1\33\1\34\1\21"+
    "\1\35\1\36\1\37\1\40\1\41\1\21\1\42\1\43"+
    "\1\44\1\45\1\21\1\46\4\21\1\23\21\21\32\0"+
    "\1\47\31\0\1\47\51\0\1\50\27\0\1\50\7\0"+
    "\1\21\4\51\1\21\1\52\70\21\1\51\4\22\1\51"+
    "\1\53\4\51\4\54\3\51\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\2\51\1\63\1\64\1\51\1\65\1\66"+
    "\1\67\1\70\1\71\1\51\1\72\1\73\1\74\1\75"+
    "\1\51\1\76\26\51\1\77\4\51\1\77\1\100\70\77"+
    "\1\21\4\51\1\21\1\52\3\21\5\101\61\21\4\51"+
    "\1\21\1\52\21\21\1\102\4\21\1\103\5\21\1\104"+
    "\34\21\4\51\1\21\1\52\31\21\1\105\37\21\4\51"+
    "\1\21\1\52\13\21\1\106\3\21\1\107\2\21\1\110"+
    "\3\21\1\111\2\21\1\112\2\21\1\113\34\21\4\51"+
    "\1\21\1\52\17\21\1\114\27\21\1\115\21\21\4\51"+
    "\1\21\1\52\26\21\1\116\42\21\4\51\1\21\1\52"+
    "\17\21\1\117\3\21\1\120\5\21\1\121\37\21\4\51"+
    "\1\21\1\52\16\21\1\122\10\21\1\123\1\124\12\21"+
    "\1\125\25\21\4\51\1\21\1\52\37\21\1\126\31\21"+
    "\4\51\1\21\1\52\31\21\1\127\37\21\4\51\1\21"+
    "\1\52\31\21\1\130\37\21\4\51\1\21\1\52\31\21"+
    "\1\131\5\21\1\132\31\21\4\51\1\21\1\52\32\21"+
    "\1\133\36\21\4\51\1\21\1\52\13\21\1\134\55\21"+
    "\4\51\1\21\1\52\13\21\1\135\3\21\1\136\51\21"+
    "\4\51\1\21\1\52\23\21\1\137\45\21\4\51\1\21"+
    "\1\52\17\21\1\140\3\21\1\141\45\21\4\51\1\21"+
    "\1\52\34\21\1\142\1\143\33\21\4\51\1\21\1\52"+
    "\54\21\1\144\13\21\37\0\1\145\27\0\1\145\41\0"+
    "\1\146\31\0\1\146\12\0\6\51\1\53\76\51\1\53"+
    "\3\51\5\147\66\51\1\53\21\51\1\150\4\51\1\151"+
    "\5\51\1\152\41\51\1\53\31\51\1\153\44\51\1\53"+
    "\13\51\1\154\3\51\1\155\2\51\1\156\3\51\1\157"+
    "\2\51\1\160\2\51\1\161\41\51\1\53\17\51\1\162"+
    "\27\51\1\163\26\51\1\53\26\51\1\164\47\51\1\53"+
    "\17\51\1\165\3\51\1\166\5\51\1\167\44\51\1\53"+
    "\16\51\1\170\10\51\1\171\1\172\12\51\1\173\32\51"+
    "\1\53\37\51\1\174\36\51\1\53\31\51\1\175\44\51"+
    "\1\53\31\51\1\176\44\51\1\53\31\51\1\177\5\51"+
    "\1\200\36\51\1\53\32\51\1\201\43\51\1\53\13\51"+
    "\1\202\62\51\1\53\13\51\1\203\3\51\1\204\56\51"+
    "\1\53\23\51\1\205\52\51\1\53\17\51\1\206\3\51"+
    "\1\207\52\51\1\53\34\51\1\210\1\211\40\51\1\53"+
    "\54\51\1\212\13\51\1\77\4\51\1\77\1\213\70\77"+
    "\1\214\4\0\1\214\1\213\70\214\1\21\4\51\1\21"+
    "\1\52\3\21\5\215\61\21\4\51\1\21\1\52\34\21"+
    "\1\216\34\21\4\51\1\21\1\52\23\21\1\217\45\21"+
    "\4\51\1\21\1\52\17\21\1\220\51\21\4\51\1\21"+
    "\1\52\36\21\1\221\32\21\4\51\1\21\1\52\27\21"+
    "\1\222\41\21\4\51\1\21\1\52\30\21\1\223\40\21"+
    "\4\51\1\21\1\52\17\21\1\224\51\21\4\51\1\21"+
    "\1\52\13\21\1\225\55\21\4\51\1\21\1\52\26\21"+
    "\1\226\1\227\41\21\4\51\1\21\1\52\17\21\1\230"+
    "\51\21\4\51\1\21\1\52\34\21\1\231\34\21\4\51"+
    "\1\21\1\52\62\21\1\232\6\21\4\51\1\21\1\52"+
    "\23\21\1\233\45\21\4\51\1\21\1\52\15\21\1\234"+
    "\53\21\4\51\1\21\1\52\26\21\1\235\42\21\4\51"+
    "\1\21\1\52\34\21\1\236\34\21\4\170\1\21\1\237"+
    "\71\21\4\51\1\21\1\52\13\21\1\240\55\21\4\51"+
    "\1\21\1\52\16\21\1\241\52\21\4\51\1\21\1\52"+
    "\33\21\1\242\35\21\4\51\1\21\1\52\35\21\1\243"+
    "\33\21\4\51\1\21\1\52\21\21\1\244\47\21\4\51"+
    "\1\21\1\52\16\21\1\245\52\21\4\246\1\21\1\247"+
    "\27\21\1\250\41\21\4\51\1\21\1\52\17\21\1\251"+
    "\51\21\4\51\1\21\1\52\15\21\1\252\53\21\4\51"+
    "\1\21\1\52\34\21\1\253\1\254\33\21\4\51\1\21"+
    "\1\52\16\21\1\255\52\21\4\51\1\21\1\52\33\21"+
    "\1\256\35\21\4\205\1\21\1\257\71\21\4\51\1\21"+
    "\1\52\27\21\1\260\12\21\1\261\26\21\4\51\1\21"+
    "\1\52\36\21\1\262\32\21\4\51\1\21\1\52\26\21"+
    "\1\263\42\21\4\51\1\21\1\52\37\21\1\264\31\21"+
    "\4\51\1\21\1\52\55\21\1\265\12\21\55\0\1\266"+
    "\76\0\1\267\21\0\6\51\1\53\3\51\5\270\66\51"+
    "\1\53\34\51\1\271\41\51\1\53\23\51\1\272\52\51"+
    "\1\53\17\51\1\273\56\51\1\53\36\51\1\274\37\51"+
    "\1\53\27\51\1\275\46\51\1\53\30\51\1\276\45\51"+
    "\1\53\17\51\1\277\56\51\1\53\13\51\1\300\62\51"+
    "\1\53\26\51\1\301\1\302\46\51\1\53\17\51\1\303"+
    "\56\51\1\53\34\51\1\304\41\51\1\53\62\51\1\305"+
    "\13\51\1\53\23\51\1\306\52\51\1\53\15\51\1\307"+
    "\60\51\1\53\26\51\1\310\47\51\1\53\34\51\1\311"+
    "\34\51\4\170\1\51\1\237\76\51\1\53\13\51\1\312"+
    "\62\51\1\53\16\51\1\313\57\51\1\53\33\51\1\314"+
    "\42\51\1\53\35\51\1\315\40\51\1\53\21\51\1\316"+
    "\54\51\1\53\16\51\1\317\52\51\4\246\1\51\1\247"+
    "\27\51\1\320\46\51\1\53\17\51\1\321\56\51\1\53"+
    "\15\51\1\322\60\51\1\53\34\51\1\323\1\324\40\51"+
    "\1\53\16\51\1\325\57\51\1\53\33\51\1\326\35\51"+
    "\4\205\1\51\1\257\76\51\1\53\27\51\1\327\12\51"+
    "\1\330\33\51\1\53\36\51\1\331\37\51\1\53\26\51"+
    "\1\332\47\51\1\53\37\51\1\333\36\51\1\53\55\51"+
    "\1\334\12\51\1\21\4\51\1\21\1\52\3\21\5\335"+
    "\61\21\4\51\1\21\1\52\17\21\1\336\51\21\4\51"+
    "\1\21\1\52\30\21\1\337\40\21\4\51\1\21\1\52"+
    "\13\21\1\340\55\21\4\51\1\21\1\52\31\21\1\341"+
    "\37\21\4\51\1\21\1\52\32\21\1\342\36\21\4\51"+
    "\1\21\1\52\36\21\1\343\32\21\4\51\1\21\1\52"+
    "\15\21\1\344\53\21\4\51\1\21\1\52\35\21\1\345"+
    "\33\21\4\51\1\21\1\52\37\21\1\346\31\21\4\51"+
    "\1\21\1\52\14\21\1\347\54\21\4\51\1\21\1\52"+
    "\13\21\1\350\2\21\1\351\52\21\4\51\1\21\1\52"+
    "\17\21\1\352\51\21\4\51\1\21\1\52\56\21\1\353"+
    "\12\21\4\51\1\21\1\52\27\21\1\354\41\21\4\51"+
    "\1\21\1\52\22\21\1\355\46\21\4\51\1\21\1\52"+
    "\13\21\1\356\55\21\4\51\1\21\1\52\27\21\1\357"+
    "\41\21\4\51\1\21\1\52\21\21\1\360\47\21\4\51"+
    "\1\21\1\52\23\21\1\361\45\21\4\51\1\21\1\52"+
    "\37\21\1\362\31\21\4\51\1\21\1\52\36\21\1\363"+
    "\32\21\4\51\1\21\1\52\23\21\1\364\45\21\4\51"+
    "\1\21\1\52\23\21\1\365\44\21\1\51\4\246\1\51"+
    "\1\247\70\51\1\21\4\51\1\21\1\52\14\21\1\366"+
    "\54\21\4\51\1\21\1\52\40\21\1\367\30\21\4\51"+
    "\1\21\1\52\23\21\1\370\45\21\4\51\1\21\1\52"+
    "\13\21\1\371\55\21\4\51\1\21\1\52\35\21\1\372"+
    "\33\21\4\51\1\21\1\52\23\21\1\373\45\21\4\51"+
    "\1\21\1\52\37\21\1\374\31\21\4\51\1\21\1\52"+
    "\13\21\1\375\55\21\4\51\1\21\1\52\36\21\1\376"+
    "\32\21\4\51\1\21\1\52\37\21\1\377\31\21\4\332"+
    "\1\21\1\u0100\71\21\4\51\1\21\1\52\13\21\1\u0101"+
    "\55\21\4\51\1\21\1\52\64\21\1\u0102\3\21\44\0"+
    "\1\u0103\25\0\1\u0103\50\0\1\u0104\25\0\1\u0104\4\0"+
    "\6\51\1\53\3\51\5\u0105\66\51\1\53\17\51\1\u0106"+
    "\56\51\1\53\30\51\1\u0107\45\51\1\53\13\51\1\u0108"+
    "\62\51\1\53\31\51\1\u0109\44\51\1\53\32\51\1\u010a"+
    "\43\51\1\53\36\51\1\u010b\37\51\1\53\15\51\1\u010c"+
    "\60\51\1\53\35\51\1\u010d\40\51\1\53\37\51\1\u010e"+
    "\36\51\1\53\14\51\1\u010f\61\51\1\53\13\51\1\u0110"+
    "\2\51\1\u0111\57\51\1\53\17\51\1\u0112\56\51\1\53"+
    "\56\51\1\u0113\17\51\1\53\27\51\1\u0114\46\51\1\53"+
    "\22\51\1\u0115\53\51\1\53\13\51\1\u0116\62\51\1\53"+
    "\27\51\1\u0117\46\51\1\53\21\51\1\u0118\54\51\1\53"+
    "\23\51\1\u0119\52\51\1\53\37\51\1\u011a\36\51\1\53"+
    "\36\51\1\u011b\37\51\1\53\23\51\1\u011c\52\51\1\53"+
    "\23\51\1\u011d\52\51\1\53\14\51\1\u011e\61\51\1\53"+
    "\40\51\1\u011f\35\51\1\53\23\51\1\u0120\52\51\1\53"+
    "\13\51\1\u0121\62\51\1\53\35\51\1\u0122\40\51\1\53"+
    "\23\51\1\u0123\52\51\1\53\37\51\1\u0124\36\51\1\53"+
    "\13\51\1\u0125\62\51\1\53\36\51\1\u0126\37\51\1\53"+
    "\37\51\1\u0127\31\51\4\332\1\51\1\u0100\76\51\1\53"+
    "\13\51\1\u0128\62\51\1\53\64\51\1\u0129\3\51\1\21"+
    "\4\51\1\21\1\52\2\21\1\u012a\66\21\4\51\1\21"+
    "\1\52\21\21\1\u012b\47\21\4\51\1\21\1\52\17\21"+
    "\1\u012c\51\21\4\51\1\21\1\52\46\21\1\u012d\22\21"+
    "\4\51\1\21\1\52\30\21\1\u012e\40\21\4\51\1\21"+
    "\1\52\31\21\1\u012f\37\21\4\51\1\21\1\52\34\21"+
    "\1\u0130\34\21\4\51\1\21\1\52\25\21\1\u0131\43\21"+
    "\4\51\1\21\1\52\17\21\1\u0132\51\21\4\51\1\21"+
    "\1\52\27\21\1\u0133\41\21\4\51\1\21\1\52\31\21"+
    "\1\u0134\37\21\4\51\1\21\1\52\34\21\1\u0135\34\21"+
    "\4\51\1\21\1\52\17\21\1\u0136\51\21\4\51\1\21"+
    "\1\52\15\21\1\u0137\53\21\4\u0113\1\21\1\u0138\71\21"+
    "\4\51\1\21\1\52\23\21\1\u0139\45\21\4\51\1\21"+
    "\1\52\13\21\1\u013a\55\21\4\51\1\21\1\52\35\21"+
    "\1\u013b\33\21\4\51\1\21\1\52\37\21\1\u013c\31\21"+
    "\4\51\1\21\1\52\17\21\1\u013d\51\21\4\51\1\21"+
    "\1\52\15\21\1\u013e\53\21\4\51\1\21\1\52\23\21"+
    "\1\u013f\45\21\4\51\1\21\1\52\23\21\1\u0140\45\21"+
    "\4\51\1\21\1\52\30\21\1\u0141\40\21\4\51\1\21"+
    "\1\52\20\21\1\u0142\50\21\4\51\1\21\1\52\34\21"+
    "\1\u0143\34\21\4\51\1\21\1\52\31\21\1\u0144\37\21"+
    "\4\51\1\21\1\52\31\21\1\u0145\37\21\4\51\1\21"+
    "\1\52\27\21\1\u0146\41\21\4\51\1\21\1\52\41\21"+
    "\1\u0147\27\21\4\51\1\21\1\52\31\21\1\u0148\37\21"+
    "\4\51\1\21\1\52\17\21\1\u0149\51\21\4\u0125\1\21"+
    "\1\u014a\71\21\4\51\1\21\1\52\31\21\1\u014b\37\21"+
    "\4\51\1\21\1\52\26\21\1\u014c\42\21\4\51\1\21"+
    "\1\52\34\21\1\u014d\34\21\4\51\1\21\1\52\52\21"+
    "\1\353\15\21\40\0\1\u014e\27\0\1\u014e\46\0\1\u014f"+
    "\27\0\1\u014f\6\0\6\51\1\53\2\51\1\u0150\73\51"+
    "\1\53\21\51\1\u0151\54\51\1\53\17\51\1\u0152\56\51"+
    "\1\53\46\51\1\u0153\27\51\1\53\30\51\1\u0154\45\51"+
    "\1\53\31\51\1\u0155\44\51\1\53\34\51\1\u0156\41\51"+
    "\1\53\25\51\1\u0157\50\51\1\53\17\51\1\u0158\56\51"+
    "\1\53\27\51\1\u0159\46\51\1\53\31\51\1\u015a\44\51"+
    "\1\53\34\51\1\u015b\41\51\1\53\17\51\1\u015c\56\51"+
    "\1\53\15\51\1\u015d\53\51\4\u0113\1\51\1\u0138\76\51"+
    "\1\53\23\51\1\u015e\52\51\1\53\13\51\1\u015f\62\51"+
    "\1\53\35\51\1\u0160\40\51\1\53\37\51\1\u0161\36\51"+
    "\1\53\17\51\1\u0162\56\51\1\53\15\51\1\u0163\60\51"+
    "\1\53\23\51\1\u0164\52\51\1\53\23\51\1\u0165\52\51"+
    "\1\53\30\51\1\u0166\45\51\1\53\20\51\1\u0167\55\51"+
    "\1\53\34\51\1\u0168\41\51\1\53\31\51\1\u0169\44\51"+
    "\1\53\31\51\1\u016a\44\51\1\53\27\51\1\u016b\46\51"+
    "\1\53\41\51\1\u016c\34\51\1\53\31\51\1\u016d\44\51"+
    "\1\53\17\51\1\u016e\51\51\4\u0125\1\51\1\u014a\76\51"+
    "\1\53\31\51\1\u016f\44\51\1\53\26\51\1\u0170\47\51"+
    "\1\53\34\51\1\u0171\41\51\1\53\52\51\1\u0113\15\51"+
    "\1\21\4\51\1\21\1\52\3\21\1\u0172\1\u0173\64\21"+
    "\4\51\1\21\1\52\13\21\1\u0174\55\21\4\51\1\21"+
    "\1\52\13\21\1\u0175\55\21\4\51\1\21\1\52\36\21"+
    "\1\u0176\32\21\4\u0154\1\21\1\u0177\71\21\4\51\1\21"+
    "\1\52\46\21\1\u0178\22\21\4\51\1\21\1\52\31\21"+
    "\1\u0179\37\21\4\51\1\21\1\52\14\21\1\u017a\54\21"+
    "\4\u0158\1\21\1\u017b\71\21\4\51\1\21\1\52\30\21"+
    "\1\u017c\40\21\4\u015a\1\21\1\u017d\71\21\4\51\1\21"+
    "\1\52\46\21\1\u017e\22\21\4\51\1\21\1\52\30\21"+
    "\1\u017f\40\21\4\51\1\21\1\52\22\21\1\u0180\46\21"+
    "\4\51\1\21\1\52\30\21\1\u0181\40\21\4\51\1\21"+
    "\1\52\46\21\1\u0182\22\21\4\u0160\1\21\1\u0183\71\21"+
    "\4\51\1\21\1\52\26\21\1\u0184\42\21\4\51\1\21"+
    "\1\52\30\21\1\u0185\40\21\4\51\1\21\1\52\17\21"+
    "\1\u0186\51\21\4\51\1\21\1\52\17\21\1\u0187\51\21"+
    "\4\51\1\21\1\52\20\21\1\u0188\50\21\4\51\1\21"+
    "\1\52\46\21\1\u0189\22\21\4\51\1\21\1\52\23\21"+
    "\1\u018a\45\21\4\51\1\21\1\52\17\21\1\u018b\51\21"+
    "\4\51\1\21\1\52\46\21\1\u018c\22\21\4\51\1\21"+
    "\1\52\30\21\1\u018d\40\21\4\51\1\21\1\52\17\21"+
    "\1\u018e\51\21\4\51\1\21\1\52\31\21\1\u018f\37\21"+
    "\4\u016d\1\21\1\u0190\71\21\4\51\1\21\1\52\34\21"+
    "\1\u0191\34\21\4\51\1\21\1\52\46\21\1\u0192\22\21"+
    "\4\51\1\21\1\52\31\21\1\u0193\37\21\4\51\1\21"+
    "\1\52\23\21\1\u0194\44\21\35\0\1\u0195\30\0\1\u0195"+
    "\45\0\1\u0196\30\0\1\u0196\10\0\6\51\1\53\3\51"+
    "\1\u0197\1\u0198\71\51\1\53\13\51\1\u0199\62\51\1\53"+
    "\13\51\1\u019a\62\51\1\53\36\51\1\u019b\32\51\4\u0154"+
    "\1\51\1\u0177\76\51\1\53\46\51\1\u019c\27\51\1\53"+
    "\31\51\1\u019d\44\51\1\53\14\51\1\u019e\54\51\4\u0158"+
    "\1\51\1\u017b\76\51\1\53\30\51\1\u019f\40\51\4\u015a"+
    "\1\51\1\u017d\76\51\1\53\46\51\1\u01a0\27\51\1\53"+
    "\30\51\1\u01a1\45\51\1\53\22\51\1\u01a2\53\51\1\53"+
    "\30\51\1\u01a3\45\51\1\53\46\51\1\u01a4\22\51\4\u0160"+
    "\1\51\1\u0183\76\51\1\53\26\51\1\u01a5\47\51\1\53"+
    "\30\51\1\u01a6\45\51\1\53\17\51\1\u01a7\56\51\1\53"+
    "\17\51\1\u01a8\56\51\1\53\20\51\1\u01a9\55\51\1\53"+
    "\46\51\1\u01aa\27\51\1\53\23\51\1\u01ab\52\51\1\53"+
    "\17\51\1\u01ac\56\51\1\53\46\51\1\u01ad\27\51\1\53"+
    "\30\51\1\u01ae\45\51\1\53\17\51\1\u01af\56\51\1\53"+
    "\31\51\1\u01b0\37\51\4\u016d\1\51\1\u0190\76\51\1\53"+
    "\34\51\1\u01b1\41\51\1\53\46\51\1\u01b2\27\51\1\53"+
    "\31\51\1\u01b3\44\51\1\53\23\51\1\u01b4\44\51\1\21"+
    "\4\51\1\21\1\52\4\21\4\u01b5\61\21\4\51\1\21"+
    "\1\52\3\21\3\u01b5\63\21\4\51\1\21\1\52\34\21"+
    "\1\u01b6\34\21\4\51\1\21\1\52\15\21\1\u01b7\53\21"+
    "\4\51\1\21\1\52\17\21\1\u01b8\51\21\4\51\1\21"+
    "\1\52\36\21\1\u01b9\32\21\4\u019d\1\21\1\u01ba\71\21"+
    "\4\51\1\21\1\52\31\21\1\u01bb\37\21\4\51\1\21"+
    "\1\52\13\21\1\u01bc\55\21\4\51\1\21\1\52\37\21"+
    "\1\u01bd\31\21\4\51\1\21\1\52\15\21\1\u01be\53\21"+
    "\4\51\1\21\1\52\13\21\1\u0179\55\21\4\51\1\21"+
    "\1\52\13\21\1\u01bf\55\21\4\51\1\21\1\52\15\21"+
    "\1\u01c0\53\21\4\51\1\21\1\52\13\21\1\u01c1\55\21"+
    "\4\u01a6\1\21\1\u01c2\71\21\4\u01a7\1\21\1\u01c3\71\21"+
    "\4\51\1\21\1\52\34\21\1\u01c4\34\21\4\51\1\21"+
    "\1\52\23\21\1\u01c5\45\21\4\51\1\21\1\52\37\21"+
    "\1\u01c6\31\21\4\51\1\21\1\52\15\21\1\u01c7\53\21"+
    "\4\u01c8\1\21\1\u01c9\46\21\1\u01ca\22\21\4\51\1\21"+
    "\1\52\20\21\1\u01cb\11\21\1\u01cc\36\21\4\51\1\21"+
    "\1\52\17\21\1\u01cd\51\21\4\51\1\21\1\52\36\21"+
    "\1\u01ce\32\21\4\51\1\21\1\52\34\21\1\u01cf\34\21"+
    "\4\51\1\21\1\52\23\21\1\u01d0\45\21\4\51\1\21"+
    "\1\52\40\21\1\u01d1\30\21\4\u01b3\1\21\1\u01d2\71\21"+
    "\4\51\1\21\1\52\31\21\1\u01d3\36\21\32\0\1\u01d4"+
    "\31\0\1\u01d4\44\0\1\u01d5\31\0\1\u01d5\12\0\6\51"+
    "\1\53\4\51\4\u01d6\66\51\1\53\3\51\3\u01d6\70\51"+
    "\1\53\34\51\1\u01d7\41\51\1\53\15\51\1\u01d8\60\51"+
    "\1\53\17\51\1\u01d9\56\51\1\53\36\51\1\u01da\32\51"+
    "\4\u019d\1\51\1\u01ba\76\51\1\53\31\51\1\u01db\44\51"+
    "\1\53\13\51\1\u01dc\62\51\1\53\37\51\1\u01dd\36\51"+
    "\1\53\15\51\1\u01de\60\51\1\53\13\51\1\u019d\62\51"+
    "\1\53\13\51\1\u01df\62\51\1\53\15\51\1\u01e0\60\51"+
    "\1\53\13\51\1\u01e1\55\51\4\u01a6\1\51\1\u01c2\71\51"+
    "\4\u01a7\1\51\1\u01c3\76\51\1\53\34\51\1\u01e2\41\51"+
    "\1\53\23\51\1\u01e3\52\51\1\53\37\51\1\u01e4\36\51"+
    "\1\53\15\51\1\u01e5\53\51\4\u01c8\1\51\1\u01c9\46\51"+
    "\1\u01e6\27\51\1\53\20\51\1\u01e7\11\51\1\u01e8\43\51"+
    "\1\53\17\51\1\u01e9\56\51\1\53\36\51\1\u01ea\37\51"+
    "\1\53\34\51\1\u01eb\41\51\1\53\23\51\1\u01ec\52\51"+
    "\1\53\40\51\1\u01ed\30\51\4\u01b3\1\51\1\u01d2\76\51"+
    "\1\53\31\51\1\u01ee\36\51\1\21\4\51\1\21\1\52"+
    "\2\21\1\u01ef\66\21\4\51\1\21\1\52\46\21\1\u01f0"+
    "\22\21\4\51\1\21\1\52\23\21\1\u01f1\45\21\4\51"+
    "\1\21\1\52\42\21\1\u01f2\26\21\4\51\1\21\1\52"+
    "\17\21\1\u01f3\51\21\4\51\1\21\1\52\42\21\1\u01f4"+
    "\26\21\4\51\1\21\1\52\35\21\1\u01f5\33\21\4\51"+
    "\1\21\1\52\35\21\1\u01f6\33\21\4\51\1\21\1\52"+
    "\23\21\1\u01f7\45\21\4\51\1\21\1\52\34\21\1\u01f8"+
    "\34\21\4\51\1\21\1\52\34\21\1\u01f9\34\21\4\51"+
    "\1\21\1\52\34\21\1\u01fa\34\21\4\51\1\21\1\52"+
    "\16\21\1\u0180\52\21\4\51\1\21\1\52\15\21\1\u01fb"+
    "\53\21\4\51\1\21\1\52\35\21\1\u01fc\33\21\4\51"+
    "\1\21\1\52\13\21\1\u01fd\54\21\1\51\4\u01c8\1\51"+
    "\1\u01c9\70\51\1\21\4\51\1\21\1\52\15\21\1\u01fe"+
    "\53\21\4\51\1\21\1\52\31\21\1\u01ff\37\21\4\51"+
    "\1\21\1\52\13\21\1\u0200\55\21\4\51\1\21\1\52"+
    "\35\21\1\u0201\33\21\4\51\1\21\1\52\34\21\1\u0202"+
    "\34\21\4\51\1\21\1\52\16\21\1\u0203\52\21\4\51"+
    "\1\21\1\52\16\21\1\u0204\52\21\4\51\1\21\1\52"+
    "\23\21\1\u0205\45\21\4\u0206\1\21\1\u0207\46\21\1\u0208"+
    "\21\21\24\0\1\u0209\32\0\1\u0209\43\0\1\u020a\32\0"+
    "\1\u020a\17\0\6\51\1\53\2\51\1\u020b\73\51\1\53"+
    "\46\51\1\u020c\27\51\1\53\23\51\1\u020d\52\51\1\53"+
    "\42\51\1\u020e\33\51\1\53\17\51\1\u020f\56\51\1\53"+
    "\42\51\1\u0210\33\51\1\53\35\51\1\u0211\40\51\1\53"+
    "\35\51\1\u0212\40\51\1\53\23\51\1\u0213\52\51\1\53"+
    "\34\51\1\u0214\41\51\1\53\34\51\1\u0215\41\51\1\53"+
    "\34\51\1\u0216\41\51\1\53\16\51\1\u01a2\57\51\1\53"+
    "\15\51\1\u0217\60\51\1\53\35\51\1\u0218\40\51\1\53"+
    "\13\51\1\u0219\62\51\1\53\15\51\1\u021a\60\51\1\53"+
    "\31\51\1\u021b\44\51\1\53\13\51\1\u021c\62\51\1\53"+
    "\35\51\1\u021d\40\51\1\53\34\51\1\u021e\41\51\1\53"+
    "\16\51\1\u021f\57\51\1\53\16\51\1\u0220\57\51\1\53"+
    "\23\51\1\u0221\45\51\4\u0206\1\51\1\u0207\46\51\1\u0222"+
    "\21\51\1\21\4\51\1\21\1\52\3\21\1\u0223\2\u0224"+
    "\1\u0225\62\21\4\51\1\21\1\52\15\21\1\u0226\53\21"+
    "\4\51\1\21\1\52\31\21\1\u0227\37\21\4\51\1\21"+
    "\1\52\36\21\1\u0228\32\21\4\51\1\21\1\52\42\21"+
    "\1\u0229\26\21\4\u0210\1\21\1\u022a\71\21\4\u0211\1\21"+
    "\1\u022b\71\21\4\51\1\21\1\52\37\21\1\u022c\31\21"+
    "\4\51\1\21\1\52\13\21\1\u022d\55\21\4\51\1\21"+
    "\1\52\46\21\1\u022e\22\21\4\51\1\21\1\52\17\21"+
    "\1\u022f\51\21\4\51\1\21\1\52\23\21\1\u0230\45\21"+
    "\4\51\1\21\1\52\13\21\1\u0231\55\21\4\51\1\21"+
    "\1\52\37\21\1\u0232\31\21\4\51\1\21\1\52\34\21"+
    "\1\u0233\34\21\4\51\1\21\1\52\13\21\1\u0234\55\21"+
    "\4\51\1\21\1\52\34\21\1\u0235\34\21\4\51\1\21"+
    "\1\52\35\21\1\u0236\33\21\4\u021d\1\21\1\u0237\71\21"+
    "\4\51\1\21\1\52\31\21\1\u0238\37\21\4\u021f\1\21"+
    "\1\u0239\71\21\4\51\1\21\1\52\31\21\1\u023a\37\21"+
    "\4\51\1\21\1\52\35\21\1\u023b\32\21\1\51\4\u0206"+
    "\1\51\1\u0207\70\51\1\21\4\51\1\21\1\52\13\21"+
    "\1\u023c\14\21\1\u023d\37\21\32\0\1\u023e\31\0\1\u023e"+
    "\44\0\1\u023f\31\0\1\u023f\12\0\6\51\1\53\3\51"+
    "\1\u0240\2\u0241\1\u0242\67\51\1\53\15\51\1\u0243\60\51"+
    "\1\53\31\51\1\u0244\44\51\1\53\36\51\1\u0245\37\51"+
    "\1\53\42\51\1\u0246\26\51\4\u0210\1\51\1\u022a\71\51"+
    "\4\u0211\1\51\1\u022b\76\51\1\53\37\51\1\u0247\36\51"+
    "\1\53\13\51\1\u0248\62\51\1\53\46\51\1\u0249\27\51"+
    "\1\53\17\51\1\u024a\56\51\1\53\23\51\1\u024b\52\51"+
    "\1\53\13\51\1\u024c\62\51\1\53\37\51\1\u024d\36\51"+
    "\1\53\34\51\1\u024e\41\51\1\53\13\51\1\u024f\62\51"+
    "\1\53\34\51\1\u0250\41\51\1\53\35\51\1\u0251\33\51"+
    "\4\u021d\1\51\1\u0237\76\51\1\53\31\51\1\u0252\37\51"+
    "\4\u021f\1\51\1\u0239\76\51\1\53\31\51\1\u0253\44\51"+
    "\1\53\35\51\1\u0254\40\51\1\53\13\51\1\u0255\14\51"+
    "\1\u0256\37\51\1\21\4\51\1\21\1\52\4\21\4\u0257"+
    "\61\21\4\51\1\21\1\52\3\21\5\u0257\61\21\4\51"+
    "\1\21\1\52\3\21\2\u0257\64\21\4\51\1\21\1\52"+
    "\31\21\1\u0258\37\21\4\51\1\21\1\52\30\21\1\u0259"+
    "\40\21\4\51\1\21\1\52\31\21\1\u025a\37\21\4\51"+
    "\1\21\1\52\36\21\1\u025b\32\21\4\51\1\21\1\52"+
    "\13\21\1\u025c\55\21\4\51\1\21\1\52\26\21\1\u025d"+
    "\42\21\4\51\1\21\1\52\15\21\1\u025e\2\21\1\u025f"+
    "\16\21\1\u0260\31\21\4\51\1\21\1\52\13\21\1\u0261"+
    "\55\21\4\51\1\21\1\52\31\21\1\u0262\37\21\4\51"+
    "\1\21\1\52\34\21\1\u0179\34\21\4\51\1\21\1\52"+
    "\13\21\1\u0263\55\21\4\51\1\21\1\52\46\21\1\u0264"+
    "\22\21\4\51\1\21\1\52\27\21\1\u0265\41\21\4\51"+
    "\1\21\1\52\27\21\1\u0266\41\21\4\51\1\21\1\52"+
    "\35\21\1\u0267\33\21\4\51\1\21\1\52\35\21\1\u0268"+
    "\33\21\4\u0253\1\21\1\u0269\71\21\4\51\1\21\1\52"+
    "\23\21\1\u026a\45\21\4\51\1\21\1\52\30\21\1\u026b"+
    "\40\21\4\51\1\21\1\52\37\21\1\u026c\30\21\45\0"+
    "\1\u026d\25\0\1\u026d\50\0\1\u026e\25\0\1\u026e\3\0"+
    "\6\51\1\53\4\51\4\u026f\66\51\1\53\3\51\5\u026f"+
    "\66\51\1\53\3\51\2\u026f\71\51\1\53\31\51\1\u0270"+
    "\44\51\1\53\30\51\1\u0271\45\51\1\53\31\51\1\u0272"+
    "\44\51\1\53\36\51\1\u0273\37\51\1\53\13\51\1\u0274"+
    "\62\51\1\53\26\51\1\u0275\47\51\1\53\15\51\1\u0276"+
    "\2\51\1\u0277\16\51\1\u0278\36\51\1\53\13\51\1\u0279"+
    "\62\51\1\53\31\51\1\u027a\44\51\1\53\34\51\1\u019d"+
    "\41\51\1\53\13\51\1\u027b\62\51\1\53\46\51\1\u027c"+
    "\27\51\1\53\27\51\1\u027d\46\51\1\53\27\51\1\u027e"+
    "\46\51\1\53\35\51\1\u027f\40\51\1\53\35\51\1\u0280"+
    "\33\51\4\u0253\1\51\1\u0269\76\51\1\53\23\51\1\u0281"+
    "\52\51\1\53\30\51\1\u0282\45\51\1\53\37\51\1\u0283"+
    "\30\51\1\21\4\u026f\1\21\1\u0284\71\21\4\51\1\21"+
    "\1\52\27\21\1\u0285\41\21\4\u0271\1\21\1\u0286\71\21"+
    "\4\u0272\1\21\1\u0287\71\21\4\51\1\21\1\52\31\21"+
    "\1\u0288\37\21\4\51\1\21\1\52\34\21\1\u0289\34\21"+
    "\4\51\1\21\1\52\17\21\1\u028a\51\21\4\51\1\21"+
    "\1\52\31\21\1\u028b\37\21\4\51\1\21\1\52\31\21"+
    "\1\u028c\37\21\4\51\1\21\1\52\35\21\1\u028d\33\21"+
    "\4\51\1\21\1\52\15\21\1\u028e\53\21\4\u027a\1\21"+
    "\1\u028f\71\21\4\51\1\21\1\52\34\21\1\u0290\34\21"+
    "\4\51\1\21\1\52\15\21\1\u0291\2\21\1\u0292\16\21"+
    "\1\u0293\31\21\4\51\1\21\1\52\32\21\1\u0294\36\21"+
    "\4\51\1\21\1\52\37\21\1\u0295\31\21\4\51\1\21"+
    "\1\52\41\21\1\u0296\27\21\4\51\1\21\1\52\46\21"+
    "\1\u0297\22\21\4\51\1\21\1\52\14\21\1\u0298\54\21"+
    "\4\51\1\21\1\52\36\21\1\u0299\32\21\4\51\1\21"+
    "\1\52\17\21\1\u029a\50\21\46\0\1\u029b\25\0\1\u029b"+
    "\50\0\1\u029c\25\0\1\u029c\2\0\1\51\4\u026f\1\51"+
    "\1\u0284\76\51\1\53\27\51\1\u029d\41\51\4\u0271\1\51"+
    "\1\u0286\71\51\4\u0272\1\51\1\u0287\76\51\1\53\31\51"+
    "\1\u029e\44\51\1\53\34\51\1\u029f\41\51\1\53\17\51"+
    "\1\u02a0\56\51\1\53\31\51\1\u02a1\44\51\1\53\31\51"+
    "\1\u02a2\44\51\1\53\35\51\1\u02a3\40\51\1\53\15\51"+
    "\1\u02a4\53\51\4\u027a\1\51\1\u028f\76\51\1\53\34\51"+
    "\1\u02a5\41\51\1\53\15\51\1\u02a6\2\51\1\u02a7\16\51"+
    "\1\u02a8\36\51\1\53\32\51\1\u02a9\43\51\1\53\37\51"+
    "\1\u02aa\36\51\1\53\41\51\1\u02ab\34\51\1\53\46\51"+
    "\1\u02ac\27\51\1\53\14\51\1\u02ad\61\51\1\53\36\51"+
    "\1\u02ae\37\51\1\53\17\51\1\u02af\50\51\1\21\4\51"+
    "\1\21\1\52\32\21\1\u02b0\36\21\4\u029e\1\21\1\u02b1"+
    "\71\21\4\51\1\21\1\52\23\21\1\u02b2\45\21\4\51"+
    "\1\21\1\52\35\21\1\u02b3\33\21\4\51\1\21\1\52"+
    "\27\21\1\u02b4\41\21\4\51\1\21\1\52\34\21\1\u02b5"+
    "\34\21\4\51\1\21\1\52\37\21\1\u02b6\31\21\4\51"+
    "\1\21\1\52\23\21\1\u02b7\45\21\4\51\1\21\1\52"+
    "\23\21\1\u02b8\45\21\4\51\1\21\1\52\31\21\1\u02b9"+
    "\37\21\4\51\1\21\1\52\31\21\1\u02ba\37\21\4\51"+
    "\1\21\1\52\35\21\1\u02bb\33\21\4\51\1\21\1\52"+
    "\31\21\1\u02bc\37\21\4\51\1\21\1\52\26\21\1\u02bd"+
    "\42\21\4\51\1\21\1\52\31\21\1\u02be\37\21\4\51"+
    "\1\21\1\52\15\21\1\u02bf\2\21\1\u02c0\50\21\4\51"+
    "\1\21\1\52\26\21\1\u02c1\42\21\4\51\1\21\1\52"+
    "\23\21\1\u02c2\45\21\4\51\1\21\1\52\40\21\1\u02c3"+
    "\27\21\25\0\1\u02c4\32\0\1\u02c4\43\0\1\u02c5\32\0"+
    "\1\u02c5\16\0\6\51\1\53\32\51\1\u02c6\36\51\4\u029e"+
    "\1\51\1\u02b1\76\51\1\53\23\51\1\u02c7\52\51\1\53"+
    "\35\51\1\u02c8\40\51\1\53\27\51\1\u02c9\46\51\1\53"+
    "\34\51\1\u02ca\41\51\1\53\37\51\1\u02cb\36\51\1\53"+
    "\23\51\1\u02cc\52\51\1\53\23\51\1\u02cd\52\51\1\53"+
    "\31\51\1\u02ce\44\51\1\53\31\51\1\u02cf\44\51\1\53"+
    "\35\51\1\u02d0\40\51\1\53\31\51\1\u02d1\44\51\1\53"+
    "\26\51\1\u02d2\47\51\1\53\31\51\1\u02d3\44\51\1\53"+
    "\15\51\1\u02d4\2\51\1\u02d5\55\51\1\53\26\51\1\u02d6"+
    "\47\51\1\53\23\51\1\u02d7\52\51\1\53\40\51\1\u02d8"+
    "\27\51\1\21\4\51\1\21\1\52\31\21\1\u02d9\37\21"+
    "\4\51\1\21\1\52\31\21\1\u02da\37\21\4\51\1\21"+
    "\1\52\46\21\1\u02db\22\21\4\51\1\21\1\52\32\21"+
    "\1\u02dc\36\21\4\51\1\21\1\52\27\21\1\u02dd\41\21"+
    "\4\51\1\21\1\52\13\21\1\u02de\55\21\4\51\1\21"+
    "\1\52\31\21\1\u02df\37\21\4\51\1\21\1\52\31\21"+
    "\1\u02e0\37\21\4\51\1\21\1\52\27\21\1\u02e1\41\21"+
    "\4\51\1\21\1\52\34\21\1\u02e2\34\21\4\51\1\21"+
    "\1\52\37\21\1\u02e3\31\21\4\u02d1\1\21\1\u02e4\71\21"+
    "\4\51\1\21\1\52\13\21\1\u02e5\55\21\4\51\1\21"+
    "\1\52\34\21\1\u02e6\34\21\4\51\1\21\1\52\31\21"+
    "\1\u02e7\37\21\4\51\1\21\1\52\31\21\1\u02e8\37\21"+
    "\4\51\1\21\1\52\17\21\1\u02e9\51\21\4\51\1\21"+
    "\1\52\21\21\1\u02ea\47\21\4\51\1\21\1\52\31\21"+
    "\1\u02eb\36\21\26\0\1\u02ec\32\0\1\u02ec\43\0\1\u02ed"+
    "\32\0\1\u02ed\15\0\6\51\1\53\31\51\1\u02ee\44\51"+
    "\1\53\31\51\1\u02ef\44\51\1\53\46\51\1\u02f0\27\51"+
    "\1\53\32\51\1\u02f1\43\51\1\53\27\51\1\u02f2\46\51"+
    "\1\53\13\51\1\u02f3\62\51\1\53\31\51\1\u02f4\44\51"+
    "\1\53\31\51\1\u02f5\44\51\1\53\27\51\1\u02f6\46\51"+
    "\1\53\34\51\1\u02f7\41\51\1\53\37\51\1\u02f8\31\51"+
    "\4\u02d1\1\51\1\u02e4\76\51\1\53\13\51\1\u02f9\62\51"+
    "\1\53\34\51\1\u02fa\41\51\1\53\31\51\1\u02fb\44\51"+
    "\1\53\31\51\1\u02fc\44\51\1\53\17\51\1\u02fd\56\51"+
    "\1\53\21\51\1\u02fe\54\51\1\53\31\51\1\u02ff\36\51"+
    "\1\21\4\51\1\21\1\52\30\21\1\u0300\40\21\4\u02ef"+
    "\1\21\1\u0301\71\21\4\51\1\21\1\52\37\21\1\u0302"+
    "\31\21\4\51\1\21\1\52\31\21\1\u0303\37\21\4\51"+
    "\1\21\1\52\37\21\1\u0304\31\21\4\51\1\21\1\52"+
    "\34\21\1\u0305\34\21\4\51\1\21\1\52\30\21\1\u0306"+
    "\40\21\4\u02f5\1\21\1\u0307\71\21\4\51\1\21\1\52"+
    "\32\21\1\u0308\36\21\4\51\1\21\1\52\27\21\1\u0309"+
    "\41\21\4\51\1\21\1\52\13\21\1\u030a\55\21\4\51"+
    "\1\21\1\52\34\21\1\u030b\34\21\4\51\1\21\1\52"+
    "\16\21\1\u030c\52\21\4\51\1\21\1\52\27\21\1\u030d"+
    "\41\21\4\51\1\21\1\52\34\21\1\u030e\34\21\4\u02fd"+
    "\1\21\1\u030f\71\21\4\51\1\21\1\52\37\21\1\u0310"+
    "\31\21\4\u02ff\1\21\1\u0311\70\21\44\0\1\u0312\25\0"+
    "\1\u0312\50\0\1\u0313\25\0\1\u0313\4\0\6\51\1\53"+
    "\30\51\1\u0314\40\51\4\u02ef\1\51\1\u0301\76\51\1\53"+
    "\37\51\1\u0315\36\51\1\53\31\51\1\u0316\44\51\1\53"+
    "\37\51\1\u0317\36\51\1\53\34\51\1\u0318\41\51\1\53"+
    "\30\51\1\u0319\40\51\4\u02f5\1\51\1\u0307\76\51\1\53"+
    "\32\51\1\u031a\43\51\1\53\27\51\1\u031b\46\51\1\53"+
    "\13\51\1\u031c\62\51\1\53\34\51\1\u031d\41\51\1\53"+
    "\16\51\1\u031e\57\51\1\53\27\51\1\u031f\46\51\1\53"+
    "\34\51\1\u0320\34\51\4\u02fd\1\51\1\u030f\76\51\1\53"+
    "\37\51\1\u0321\31\51\4\u02ff\1\51\1\u0311\70\51\1\21"+
    "\4\51\1\21\1\52\17\21\1\u0322\51\21\4\51\1\21"+
    "\1\52\35\21\1\u0323\33\21\4\51\1\21\1\52\30\21"+
    "\1\u0324\40\21\4\51\1\21\1\52\26\21\1\u0325\42\21"+
    "\4\51\1\21\1\52\23\21\1\u0326\45\21\4\u0319\1\21"+
    "\1\u0327\71\21\4\51\1\21\1\52\31\21\1\u0328\37\21"+
    "\4\51\1\21\1\52\37\21\1\u0329\31\21\4\51\1\21"+
    "\1\52\34\21\1\u032a\34\21\4\51\1\21\1\52\23\21"+
    "\1\u032b\45\21\4\u031e\1\21\1\u032c\71\21\4\51\1\21"+
    "\1\52\32\21\1\u032d\36\21\4\51\1\21\1\52\27\21"+
    "\1\u032e\41\21\4\51\1\21\1\52\31\21\1\u032f\36\21"+
    "\6\51\1\53\17\51\1\u0330\56\51\1\53\35\51\1\u0331"+
    "\40\51\1\53\30\51\1\u0332\45\51\1\53\26\51\1\u0333"+
    "\47\51\1\53\23\51\1\u0334\45\51\4\u0319\1\51\1\u0327"+
    "\76\51\1\53\31\51\1\u0335\44\51\1\53\37\51\1\u0336"+
    "\36\51\1\53\34\51\1\u0337\41\51\1\53\23\51\1\u0338"+
    "\45\51\4\u031e\1\51\1\u032c\76\51\1\53\32\51\1\u0339"+
    "\43\51\1\53\27\51\1\u033a\46\51\1\53\31\51\1\u033b"+
    "\36\51\1\21\4\51\1\21\1\52\30\21\1\u033c\40\21"+
    "\4\51\1\21\1\52\37\21\1\u033d\31\21\4\51\1\21"+
    "\1\52\17\21\1\u033e\51\21\4\51\1\21\1\52\13\21"+
    "\1\u033f\55\21\4\51\1\21\1\52\31\21\1\u0340\37\21"+
    "\4\51\1\21\1\52\30\21\1\u0341\40\21\4\51\1\21"+
    "\1\52\26\21\1\u0342\42\21\4\51\1\21\1\52\23\21"+
    "\1\u0343\45\21\4\51\1\21\1\52\31\21\1\u0344\37\21"+
    "\4\51\1\21\1\52\31\21\1\u0345\37\21\4\51\1\21"+
    "\1\52\37\21\1\u0346\31\21\4\u033b\1\21\1\u0347\70\21"+
    "\6\51\1\53\30\51\1\u0348\45\51\1\53\37\51\1\u0349"+
    "\36\51\1\53\17\51\1\u034a\56\51\1\53\13\51\1\u034b"+
    "\62\51\1\53\31\51\1\u034c\44\51\1\53\30\51\1\u034d"+
    "\45\51\1\53\26\51\1\u034e\47\51\1\53\23\51\1\u034f"+
    "\52\51\1\53\31\51\1\u0350\44\51\1\53\31\51\1\u0351"+
    "\44\51\1\53\37\51\1\u0352\31\51\4\u033b\1\51\1\u0347"+
    "\70\51\1\21\4\51\1\21\1\52\36\21\1\u0353\32\21"+
    "\4\51\1\21\1\52\13\21\1\u0354\55\21\4\51\1\21"+
    "\1\52\30\21\1\u0355\40\21\4\51\1\21\1\52\34\21"+
    "\1\u0356\34\21\4\u034c\1\21\1\u0357\71\21\4\51\1\21"+
    "\1\52\17\21\1\u0358\51\21\4\51\1\21\1\52\13\21"+
    "\1\u0359\55\21\4\51\1\21\1\52\31\21\1\u035a\37\21"+
    "\4\u0350\1\21\1\u035b\71\21\4\51\1\21\1\52\30\21"+
    "\1\u035c\40\21\4\51\1\21\1\52\26\21\1\u035d\41\21"+
    "\6\51\1\53\36\51\1\u035e\37\51\1\53\13\51\1\u035f"+
    "\62\51\1\53\30\51\1\u0360\45\51\1\53\34\51\1\u0361"+
    "\34\51\4\u034c\1\51\1\u0357\76\51\1\53\17\51\1\u0362"+
    "\56\51\1\53\13\51\1\u0363\62\51\1\53\31\51\1\u0364"+
    "\37\51\4\u0350\1\51\1\u035b\76\51\1\53\30\51\1\u0365"+
    "\45\51\1\53\26\51\1\u0366\41\51\1\21\4\51\1\21"+
    "\1\52\17\21\1\u0367\51\21\4\51\1\21\1\52\34\21"+
    "\1\u0368\34\21\4\51\1\21\1\52\36\21\1\u0369\32\21"+
    "\4\51\1\21\1\52\23\21\1\u036a\45\21\4\51\1\21"+
    "\1\52\30\21\1\u036b\40\21\4\51\1\21\1\52\34\21"+
    "\1\u036c\34\21\4\u0364\1\21\1\u036d\71\21\4\51\1\21"+
    "\1\52\17\21\1\u036e\51\21\4\51\1\21\1\52\13\21"+
    "\1\u036f\54\21\6\51\1\53\17\51\1\u0370\56\51\1\53"+
    "\34\51\1\u0371\41\51\1\53\36\51\1\u0372\37\51\1\53"+
    "\23\51\1\u0373\52\51\1\53\30\51\1\u0374\45\51\1\53"+
    "\34\51\1\u0375\34\51\4\u0364\1\51\1\u036d\76\51\1\53"+
    "\17\51\1\u0376\56\51\1\53\13\51\1\u0377\54\51\1\21"+
    "\4\u0370\1\21\1\u0378\71\21\4\51\1\21\1\52\23\21"+
    "\1\u0379\45\21\4\51\1\21\1\52\17\21\1\u037a\51\21"+
    "\4\51\1\21\1\52\31\21\1\u037b\37\21\4\51\1\21"+
    "\1\52\36\21\1\u037c\32\21\4\51\1\21\1\52\23\21"+
    "\1\u037d\45\21\4\51\1\21\1\52\30\21\1\u037e\40\21"+
    "\4\51\1\21\1\52\34\21\1\u037f\33\21\1\51\4\u0370"+
    "\1\51\1\u0378\76\51\1\53\23\51\1\u0380\52\51\1\53"+
    "\17\51\1\u0381\56\51\1\53\31\51\1\u0382\44\51\1\53"+
    "\36\51\1\u0383\37\51\1\53\23\51\1\u0384\52\51\1\53"+
    "\30\51\1\u0385\45\51\1\53\34\51\1\u0386\33\51\1\21"+
    "\4\51\1\21\1\52\31\21\1\u0387\37\21\4\u0381\1\21"+
    "\1\u0388\71\21\4\u0382\1\21\1\u0389\71\21\4\51\1\21"+
    "\1\52\17\21\1\u038a\51\21\4\51\1\21\1\52\31\21"+
    "\1\u038b\37\21\4\51\1\21\1\52\36\21\1\u038c\32\21"+
    "\4\51\1\21\1\52\23\21\1\u038d\44\21\6\51\1\53"+
    "\31\51\1\u038e\37\51\4\u0381\1\51\1\u0388\71\51\4\u0382"+
    "\1\51\1\u0389\76\51\1\53\17\51\1\u038f\56\51\1\53"+
    "\31\51\1\u0390\44\51\1\53\36\51\1\u0391\37\51\1\53"+
    "\23\51\1\u0392\44\51\1\21\4\u038e\1\21\1\u0393\71\21"+
    "\4\u038f\1\21\1\u0394\71\21\4\u0390\1\21\1\u0395\71\21"+
    "\4\51\1\21\1\52\17\21\1\u0396\51\21\4\51\1\21"+
    "\1\52\31\21\1\u0397\36\21\1\51\4\u038e\1\51\1\u0393"+
    "\71\51\4\u038f\1\51\1\u0394\71\51\4\u0390\1\51\1\u0395"+
    "\76\51\1\53\17\51\1\u0398\56\51\1\53\31\51\1\u0399"+
    "\36\51\1\21\4\u0398\1\21\1\u039a\71\21\4\u0399\1\21"+
    "\1\u039b\70\21\1\51\4\u0398\1\51\1\u039a\71\51\4\u0399"+
    "\1\51\1\u039b\70\51";

  private static int [] zzUnpackTrans() {
    int [] result = new int[54243];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\1\1\4\11\2\1\4\11"+
    "\31\0\2\11\24\0\1\1\112\0\1\1\23\0\1\11"+
    "\7\0\1\11\7\0\1\11\120\0\1\11\67\0\1\11"+
    "\21\0\1\11\54\0\1\11\3\0\1\11\1\0\1\11"+
    "\5\0\1\11\14\0\1\11\51\0\1\11\7\0\2\11"+
    "\5\0\1\11\10\0\1\11\64\0\1\11\42\0\2\11"+
    "\13\0\1\11\1\0\1\11\57\0\1\11\32\0\1\11"+
    "\1\0\2\11\7\0\1\11\41\0\1\11\22\0\2\1"+
    "\36\0\1\11\34\0\1\11\5\0\1\11\7\0\1\11"+
    "\1\0\3\11\23\0\1\11\4\0\1\11\32\0\1\11"+
    "\17\0\1\11\3\0\1\11\21\0\1\11\12\0\1\11"+
    "\17\0\2\11\11\0\3\11\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[923];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, String lexeme) {
        System.out.println("\n*************************************");
        System.out.printf("Token >> Tipo: %d | Lexeme: %s | Linea: %d | Columna: %d\n", type, lexeme == null ? "" : lexeme, yyline + 1, yycolumn + 1);
        return new Symbol(type, new Token(lexeme, yyline + 1, yycolumn + 1));
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error en "+yytext());
            }
            // fall through
          case 65: break;
          case 2:
            { 
            }
            // fall through
          case 66: break;
          case 3:
            { return symbol(EXCLAMACION,yytext());
            }
            // fall through
          case 67: break;
          case 4:
            { return symbol(COMA,yytext());
            }
            // fall through
          case 68: break;
          case 5:
            { return symbol(PUNTOS,yytext());
            }
            // fall through
          case 69: break;
          case 6:
            { return symbol(MENOR,yytext());
            }
            // fall through
          case 70: break;
          case 7:
            { return symbol(MAYOR,yytext());
            }
            // fall through
          case 71: break;
          case 8:
            { return symbol(CORCHETE_A,yytext());
            }
            // fall through
          case 72: break;
          case 9:
            { return symbol(CORCHETE_C,yytext());
            }
            // fall through
          case 73: break;
          case 10:
            { return symbol(LLAVE_A,yytext());
            }
            // fall through
          case 74: break;
          case 11:
            { return symbol(LLAVE_C,yytext());
            }
            // fall through
          case 75: break;
          case 12:
            { return symbol(CADENA_WS,yytext());
            }
            // fall through
          case 76: break;
          case 13:
            { return symbol(CADENA_S,yytext());
            }
            // fall through
          case 77: break;
          case 14:
            { return symbol(ID_CADENA,yytext());
            }
            // fall through
          case 78: break;
          case 15:
            { return symbol(ID,yytext());
            }
            // fall through
          case 79: break;
          case 16:
            { return symbol(NO,yytext());
            }
            // fall through
          case 80: break;
          case 17:
            { return symbol(SI,yytext());
            }
            // fall through
          case 81: break;
          case 18:
            { return symbol(URL,yytext());
            }
            // fall through
          case 82: break;
          case 19:
            { return symbol(TEMAS,yytext());
            }
            // fall through
          case 83: break;
          case 20:
            { return symbol(TEMA,yytext());
            }
            // fall through
          case 84: break;
          case 21:
            { return symbol(BOTON,yytext());
            }
            // fall through
          case 85: break;
          case 22:
            { return symbol(CLASE,yytext());
            }
            // fall through
          case 86: break;
          case 23:
            { return symbol(COMBO,yytext());
            }
            // fall through
          case 87: break;
          case 24:
            { return symbol(FILAS,yytext());
            }
            // fall through
          case 88: break;
          case 25:
            { return symbol(RADIO,yytext());
            }
            // fall through
          case 89: break;
          case 26:
            { return symbol(ALINEACION_CADENA,yytext());
            }
            // fall through
          case 90: break;
          case 27:
            { return symbol(IMAGEN,yytext());
            }
            // fall through
          case 91: break;
          case 28:
            { return symbol(INDICE,yytext());
            }
            // fall through
          case 92: break;
          case 29:
            { return symbol(NOMBRE,yytext());
            }
            // fall through
          case 93: break;
          case 30:
            { return symbol(TITULO,yytext());
            }
            // fall through
          case 94: break;
          case 31:
            { return symbol(USUARIO,yytext());
            }
            // fall through
          case 95: break;
          case 32:
            { return symbol(CHECKBOX,yytext());
            }
            // fall through
          case 96: break;
          case 33:
            { return symbol(COLUMNAS,yytext());
            }
            // fall through
          case 97: break;
          case 34:
            { return symbol(OPCIONES,yytext());
            }
            // fall through
          case 98: break;
          case 35:
            { return symbol(PASSWORD,yytext());
            }
            // fall through
          case 99: break;
          case 36:
            { return symbol(REQUERIDO,yytext());
            }
            // fall through
          case 100: break;
          case 37:
            { return symbol(FECHA,yytext());
            }
            // fall through
          case 101: break;
          case 38:
            { return symbol(ALINEACION,yytext());
            }
            // fall through
          case 102: break;
          case 39:
            { return symbol(AREA_TEXTO,yytext());
            }
            // fall through
          case 103: break;
          case 40:
            { return symbol(FORMULARIO,yytext());
            }
            // fall through
          case 104: break;
          case 41:
            { return symbol(CAMPO_TEXTO,yytext());
            }
            // fall through
          case 105: break;
          case 42:
            { return symbol(FIN_SOLICITUD,yytext());
            }
            // fall through
          case 106: break;
          case 43:
            { return symbol(INI_SOLICITUD,yytext());
            }
            // fall through
          case 107: break;
          case 44:
            { return symbol(NOMBRE_CAMPO,yytext());
            }
            // fall through
          case 108: break;
          case 45:
            { return symbol(CREAR_USUARIO,yytext());
            }
            // fall through
          case 109: break;
          case 46:
            { return symbol(LOGIN_USUARIO,yytext());
            }
            // fall through
          case 110: break;
          case 47:
            { return symbol(TEXTO_VISIBLE,yytext());
            }
            // fall through
          case 111: break;
          case 48:
            { return symbol(USUARIO_NUEVO,yytext());
            }
            // fall through
          case 112: break;
          case 49:
            { return symbol(FIN_SOLICITUDES,yytext());
            }
            // fall through
          case 113: break;
          case 50:
            { return symbol(INI_SOLICITUDES,yytext());
            }
            // fall through
          case 114: break;
          case 51:
            { return symbol(FECHA_CREACION,yytext());
            }
            // fall through
          case 115: break;
          case 52:
            { return symbol(NUEVO_PASSWORD,yytext());
            }
            // fall through
          case 116: break;
          case 53:
            { return symbol(USUARIO_ANTIGUO,yytext());
            }
            // fall through
          case 117: break;
          case 54:
            { return symbol(ELIMINAR_USUARIO,yytext());
            }
            // fall through
          case 118: break;
          case 55:
            { return symbol(NUEVO_FORMULARIO,yytext());
            }
            // fall through
          case 119: break;
          case 56:
            { return symbol(MODIFICAR_USUARIO,yytext());
            }
            // fall through
          case 120: break;
          case 57:
            { return symbol(AGREGAR_COMPONENTE,yytext());
            }
            // fall through
          case 121: break;
          case 58:
            { return symbol(ELIMINAR_COMPONENTE,yytext());
            }
            // fall through
          case 122: break;
          case 59:
            { return symbol(ELIMINAR_FORMULARIO,yytext());
            }
            // fall through
          case 123: break;
          case 60:
            { return symbol(CREDENCIALES_USUARIO,yytext());
            }
            // fall through
          case 124: break;
          case 61:
            { return symbol(MODIFICAR_COMPONENTE,yytext());
            }
            // fall through
          case 125: break;
          case 62:
            { return symbol(MODIFICAR_FORMULARIO,yytext());
            }
            // fall through
          case 126: break;
          case 63:
            { return symbol(PARAMETROS_COMPONENTE,yytext());
            }
            // fall through
          case 127: break;
          case 64:
            { return symbol(PARAMETROS_FORMULARIO,yytext());
            }
            // fall through
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   */
  private static String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
